#+hugo_base_dir: ../
#+hugo_section: posts
#+OPTIONS: toc:2


* Posts
** Tools that are Best! :terminal:cli:linux:minimal:tools:
   :PROPERTIES:
   :EXPORT_FILE_NAME: tools-readme
   :EXPORT_DATE: 2023-03-17
   :EXPORT_HUGO_DRAFT: false
   :END:

--------------

*** Utilities that are Best! üåü
--------------

|-------------------------+-------------------------------------|
| Class                   | Name                                |
|-------------------------+-------------------------------------|
| Window Manager          | [[https://hyprland.org/][Hyprland]] üå∏                         |
| Text Editor             | [[https://www.gnu.org/software/emacs/][Emacs]] üíÆ                            |
| Gtk Theme               | [[https://github.com/Fausto-Korpsvart/Gruvbox-GTK-Theme][Gruvbox]] / [[https://github.com/vinceliuice/Orchis-theme][Orchis]] üé®                 |
| Font                    | [[https://tosche.net/fonts/comic-code][Comic Code]] / [[https://github.com/dtinth/comic-mono-font][Comic Mono]] / [[https://github.com/tonsky/FiraCode][Fira Code]] |
| Pdf Reader              | [[https://github.com/ahrm/sioyek][Sioyek]] üìî (ditch zathura)           |
| Media Player            | [[https://mpv.io][MPV!]] üé¨ (its MVP too)               |
| Image Viewer            | [[https://sr.ht/~exec64/imv/][Imv]] üñºÔ∏è                              |
| RSS Reader              | [[https://github.com/skeeto/elfeed][Elfeed]] üì∞ (Again, Emacs)            |
| Music Player            | [[https://github.com/ncmpcpp/ncmpcpp][Ncmpcpp]] or [[https://github.com//mingus][Mingus in Emacs]] üé∂       |
| Terminal                | [[https://codeberg.org/dnkl/foot][Foot]] via footclient ‚öΩ              |
| Menu/Launcher           | [[https://github.com/davatorium/rofi][Rofi]] üöÄ                             |
| Notification            | [[https://github.com/dunst/dunst][Dunst]]  üõéÔ∏è                           |
| Shell                   | [[https://zsh.org][Zshell]] with [[https://starship.rs][Starship]] üî∞             |
| Status Bar              | [[https://github.com/Alexays/Waybar][Waybar]]  üç•                          |
| Favourite Color-Schemes | Modus-Vivendi + Gruvbox             |
|-------------------------+-------------------------------------|

#+begin_quote
Rest all other stuffs I do in Emacs, tbh I could do everything in Emacs lol.
#+end_quote


Feel free to comment down and ask me doubts or about some improvements, you wanna inform! I will be glad.
** My Linux Journey :distro:linux:
:PROPERTIES:
:EXPORT_FILE_NAME: linux-journey
:EXPORT_DATE: 2023-03-10
:EXPORT_HUGO_DRAFT: false
:END:


*Small info/log on my linux journey and my experience.*

/If you are reading this, I encourage you to write blogs like this and have it in your git repo. Don't forget to tag or inform me, I'd be glad to read your journey too!/

-----

Linux is not widely recommended or discussed topic among real life friends or circle, every system comes pre-installed with win-dows, and its no big surprise people don't have a feel towards their usage of OS.

Not many people update their system, not many try to explore Alternative softwares, they stick very much to the default out-of-the-box Application. Tbh if you deep dive and understand windows, it is total crap, *Obnoxious*.

My reason to switch over to Linux was simple as other had :
- No Freedom
- Slow win-dows
- Cannot even run the browser properly
- Cannot even do multitasking efficiently
- The bloatware crap were too much
- Updates are like *eternal sleep* (No-sense updates)

My linux journey was from Linux Mint > EndeavourOS > Arch Linux > and now NixOS.

*** The Embark

I started to explore some YouTube video on Linux (as a normie at that time), soon I got familiar with good explanation, thankfully CTT had made an Linux Mint playlist and it helped to installing the first and the best *Beginner Distro*, the *Linux Mint*.

The gain and experience was *Ultimate*. Loved it, felt the Freedom, felt the deeper understanding of a *real System*.

I choose the flagship Cinnamon DE and it was very comfortable.

After few months, I finally stumbled upon a drawback here, it was stable packages (old package versions).

That is when I saw the concept of *Rolling release*, at that time *EndeavourOS* was the flavor of Linux distro at that time, peaked the distrowatch and all. So guess what, I installed EvndeavourOs and expanded more love towards terminal and latest packages.

Soon i felt i did not needed what all EndeavourOS ships, I want custom or DIY (something i take control of), then i realized, EOS was arch-based, so guess again, went with the great Independent Arch linux.

Boom, the best linux journey (learning), I only mean it for learning, other than that Arch is just cool kids bag.

Finally, now with some other jolt of distro trend, I stumbled the name *"NixOS"*.
It is somewhat reinventing the wheel, but it is so different that I'd hate to even say it as a Linux distro, It stands unique with linux distros.

Tbh I loved LM and Arch alot, I was a devotee to Arch too, and I hated Nix when I tried, cause things were weird.
+ You won't know where to start nor what to refer
+ Flakes or home-manager, How to understand?
+ Do nix-env or rebuild all the time?
+ What files to edit to achieve same setup as my previous distro?

  These were all the things that I hated and was frustrated about, there was still many things that felt hard.
  I did leave Nix and install Arch few times back and forth, I was debating with myself and id my own research all over Internet.

  That is when I thought nix lacked Documentation or good YouTuber to speak of, I really wish one of them could explain and make it their distro to explain timely on things.

  Fine, somehow forced myself and came a long way of setting up Good working nixos config, now I'm on flakes.

  Nix is great if it works as expected or if we make it work, but, if I get stuck or the issue goes for days that is when I really hate Nix, because it ain't easy to solve some unique issues. Most of these apply for HomeManager actually, it adds more trouble.

  It is adviced to learn how Nix works or Nix as Functional Programming Language.

--------

Okay, so it was not about shilling Nix or anything, Just my Linux experience.
** NixOS : Reproducible - Immutable :emacs:distro:linux:nixos:
   :PROPERTIES:
   :EXPORT_FILE_NAME: try-nixos
   :EXPORT_DATE: <2023-03-23 Thu>
   :EXPORT_HUGO_DRAFT: false
   :END:

--------------

Introduction part, you would better have read it on official nixos site ([[https://nixos.org]])

*** "Should you try NixOS?" ‚ùÑÔ∏è

Here's an answer from a non-programmer, who just browses and watches media.
Just don't, if you are looking for small benefit. *Don't!*
 regret having hard time to figure out petty things, again forget about error, you cannot even search in web.

But, if you have decided, go with it. According to me (non-programmer), these points are good to consider NixOS
 + You use Emacs (lol), *Emacs* ‚ù§Ô∏è  *Nix* is Match made in Heaven.
 + You want to declare stuffs and get same output, and forget what all you setup, cause its all declared in config.
 + You want an isolated environments (shell) to do some stuffs without involving whole system.
 + You want to stop troubleshooting and breaking update and are lazy to backup, and want to rollback with ease like with just a reboot.
 + You want to say I use *Nixos Btw*.
 + You don't want to worry about breaking your system nor fix something when you are updating system.
 + You are willing to learn (advanced) things and fine with steep learning curve.

--------------

*** How I manage my system üå≤

I manage my whole system with single org file. Its easy and pretty handy. You can read that file here *‚Ü¨* [[https://github.com/idlip/d-nix/blob/onepiece/d-setup.org][d-setup.org]] , its both self documenting and has all source code blocks.

Another key feature in my setup is, every file i tangle is at *read-only mode*. So generally we can avoid editing/touching them. Thus, every action has to be made in *d-setup.org* only.

Also, I have made files to be *symlink*, so i can edit them without requiring to rebuild whole thing!

--------------


**** Credits üéñÔ∏è

These configs were the inspiration and helped to build this way.

I thank them sincerely.

[[https://github.com/Iron-Shark/Technonomicon][Iron Shark]] *‚üπ* Made migrating to Single org-file config very easy.

[[https://github.com/sioodmy/dotfiles][Sioodmy]] *‚üπ* First config which I understand thoroughly and modified based on this.

------------------------------------------------------------------------------------------
** Imposter Syndrome : Formula for Success :phenomenon:success:skill:imposter:psychology:
:PROPERTIES:
:EXPORT_FILE_NAME: imposter-syndrome
:EXPORT_DATE: 2023-03-24
:EXPORT_HUGO_DRAFT: false
:END:

- Have you ever felt a fear of losing or doubt your own ability?
- Have you felt unworthy, lost your self esteem due to a mistake?
- Are you feeling constant fear of being discovered rather than being proud?

The matter is, is these sound true or happening at some moment, let me condition it as *"Imposted Syndrome"*.

You might remember the word "Imposter" from the most popular mobile game during lockdown, *Among us* ([[https://www.innersloth.com/games/among-us/][site]]), yeah as the name suggests it means one who deceives.

But imposter syndrome is seriously for real, a condition, which people do experience in their life. They don't usually realize or find its symptoms as it is in itself a _negative feeling_, provoking [[https://www.psychologytoday.com/intl/basics/anxiety][anxiety]] and [[https://www.psychologytoday.com/intl/basics/fear][fear]].


    + People with imposter syndrome feel inauthentic, question their own ability to be
    successful, and are convinced that they do not belong in the roles they stand, even
    when they experience success.

I myself have felt this, when I was starting out journey to learn new course (say programming language), I felt it was oceanic knowledge where I only had a boat.

*** Ways to stop Imposter Syndrome

#+begin_quote
/Where there is a will, there is a way./
#+end_quote


**** Trust the Process

   Reflect on your actions, see the world praising you. Instead of listening to the negative feeling from your head, listen to the feedback from others.

   - Others believe in you
   - You don't believe in yourself
   - Yet you believe yourself instead of them

   If you doubt yourself, shouldn't you also doubt your judgment of yourself?

**** Look for Evidence

   Fine you feel it that way, see if you can find evidence and measures. Think of some example where you have made some positive impact on others, how much change have you brought them.

**** Remember the Journey

   Look back at the steps you have taken, how was the process of learning from scratch, rock-bottom.

   /'It will get better and you'll be more proud of yourself.'/

**** Turn the Tables

   Make it a strenth, refrain from doubts. Those with imposter syndrome are more likely to say "I don't know" when they don't know. This is an advantage. Overconfident people assume they have all the answers, even when they don't.

    Humility, uncertainty, and self-doubt are part of the learning process. The key is to believe in your ability to learn.


**** Suggested Reads

If you want to explore more on this concepts :

1. [[https://www.psychologytoday.com/intl/blog/all-kids-thriving/202302/the-power-of-belonging][The Power of Belonging]]

2. [[https://www.psychologytoday.com/intl/blog/on-your-way-with-adhd/202302/the-connection-between-adhd-and-imposter-syndrome][Connection between ADHD and Imposter Syndrome]]
** Emacs Efficiency :cheatsheet:keybindings:emacs:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-keys
:EXPORT_DATE: 2023-03-29
:EXPORT_HUGO_DRAFT: false
:END:


This is straight away from [[https://github.com/VernonGrant/discovering-emacs][VernonGrant]] who hosts a podcast for Emacs called "[[https://www.discovering-emacs.com/][Discovering-Emacs]]".
It's a great and has very much professional vibes, the explanations are Crisp and Clear!
I suggest you to check out, he even has made [[https://www.youtube.com/@discoveringemacs][YouTube channel]] for it.

I have removed some of the common bindings from this table, I have retained some unique one's which isn't discovered generally. I guess that is why the name is made (lol)

I just wanted to have a cheatsheet for it, so I decided to leave it as a post here.

You can checkout the source here ‚üæ [[https://github.com/VernonGrant/emacs-keyboard-shortcuts]]

*** General Shortcuts

| Shortcut              | Command Invoked                  | Description                                                        |
|-----------------------+----------------------------------+--------------------------------------------------------------------|
| =C-x Esc Esc=         | =repeat-complex-command=         | Edit and re-evaluate last complex command.                         |
| =C-h f=               | =describe-function=              | Help information for a function.                                   |
| =C-h x=               | =describe-command=               | Help information for a command (a function available using =M-x=). |
| =C-h l=               | =view-lossage=                   | Show log for key presses and commands.                             |
| =M--=                 | =negative-argument=              | Prefix to perform negative meta commands.                          |
| =C--=                 | =negative-argument=              | Prefix to perform negative commands.                               |
| =M-l=                 | =downcase-word=                  | Lowercase word forward.                                            |
| =M-c=                 | =capitalize-word=                | Capitalize word forward.                                           |
| =M-u=                 | =upcase-word=                    | Uppercase word forward.                                            |
| =C-<space> C-<space>= | =set-mark-command=               | Add mark to mark ring.                                             |
| =C-u C-<space>=       | =set-mark-command=               | Jump to previous mark.                                             |
| =M-q=                 | =fill-paragraph=                 | Wrap/reformat to fill column.                                      |
| =M-^=                 | =delete-indentation=             | Join previous line.                                                |
| =M-- M-^=             | =delete-indentation=             | Join following line.                                               |
| =M-{=                 | =backward-paragraph=             | Previous paragraph.                                                |
| =M-}=                 | =forward-paragraph=              | Next paragraph.                                                    |
| =C-x C-v=             | =find-alternate-file=            | Find alternative file.                                             |
| =C-x i=               | =insert-file=                    | Insert file contents into the current file.                        |
| =C-x h=               | =mark-whole-buffer=              | Highlight entire buffer.                                           |
| =C-M-\=               | =indent-region=                  | Re-indent code region in region or from previous mark point.       |
| =C-x C-x=             | =exchange-point-and-mark=        | Put the mark where point is now, and point where the mark is now.  |
| =C-x C-j=             | =dired-jump=                     | Open Dired jump.                                                   |
| =C-x SPC=             | =rectangle-mark-mode=            | Rectangle edit mode, can use string-insert-rectangle.              |
| =C-x +=               | =balance-windows=                | Resize all splits to equal sizes.                                  |
| =C-x 5 2=             | =make-frame-command=             | Open in new frame.                                                 |
| =C-x r SPC=           | =point-to-register=              | Point-to-register.                                                 |
| =C-x r j=             | =jump-to-register=               | Jump-to-register.                                                  |
| =M-s o=               | =occur=                          | List lines using regex.                                            |
| =M-s h r=             | =highlight-regexp=               | Highlights regex expression (useful for presentations).            |
| =M-r=                 | =move-to-window-line-top-bottom= | Move cursor to top, middle and bottom.                             |
| =C-l=                 | =recenter-top-bottom=            | Move text in relation to the cursor, to top, middle and bottom.    |
| =M-!=                 | =shell-command=                  | Run a shell command.                                               |
| =M-&=                 | =async-shell-command=            | Async shell command.                                               |
| =C-u 0=               | =universal-argument=             | Infinite count prefix.                                             |
| =C-u {count}=         | =universal-argument=             | Repeat operation x amount of times.                                |
| =C-x z=               | =repeat=                         | Repeat command.                                                    |
| =C-x backspace=       | =backward-kill-sentence=         | Clear mini-buffer.                                                 |
| =M-g M-g=             | =goto-line=                      | Go to line.                                                        |
| =C-x 1=               | =delete-other-windows=           | Kill other windows.                                                |
| =M-z (char)=          | =zap-to-char=                    | Zap up to char.                                                    |
| =C-x * g=             | =calc-dispatch=                  | Eval in new buffer.                                                |
| =C-u M-x=             | =universal-argument=             | Run command with additional options.                               |

*** Macros
:PROPERTIES:
:CUSTOM_ID: macros
:END:
| Shortcut          | Command Invoked             | Description                                                            |
|-------------------+-----------------------------+------------------------------------------------------------------------|
| =C-x (=           | =kmacro-start-macro=        | Define keyboard macro.                                                 |
| =C-x )=           | =kmacro-end-macro=          | End keyboard macro definition.                                         |
| =C-x e=           | =kmacro-end-and-call-macro= | Playback keyboard macro, can just keep pressing =e= after first press. |
| =C-x C-k <space>= | =kmacro-step-edit-macro=    | Open keyboard macro debugger.                                          |
| =C-x C-k e=       | =edit-kbd-macro=            | Enter macro editor, (C-c C-c) to finish editing.                       |
| =C-x C-k n=       | =kmacro-name-last-macro=    | Save the keyboard macro for later use.                                 |
|                   | =insert-kbd-macro=          | Insert a saved macro into the file, in Emacs lisp.                     |

*** Project
:PROPERTIES:
:CUSTOM_ID: project
:END:
| Shortcut  | Command Invoked                    | Description                                                                           |
|-----------+------------------------------------+---------------------------------------------------------------------------------------|
| =C-x p != | =project-shell-command=            | Run =shell-command= in the current project's root directory.                          |
| =C-x p &= | =project-async-shell-command=      | Run =async-shell-command= in the current project's root directory.                    |
| =C-x p f= | =project-find-file=                | Visit a file (with completion) in the current project.                                |
| =C-x p F= | =project-or-external-find-file=    | Visit a file (with completion) in the current project or external roots.              |
| =C-x p b= | =project-switch-to-buffer=         | Display buffer in the selected window, for a buffer belonging to the current project. |
| =C-x p s= | =project-shell=                    | Start an inferior shell in the current project's root directory.                      |
| =C-x p d= | =project-find-dir=                 | Start Dired in a directory inside the current project.                                |
| =C-x p D= | =project-dired=                    | Start Dired in the current project's root.                                            |
| =C-x p v= | =project-vc-dir=                   | Run VC-Dir in the current project's root.                                             |
| =C-x p c= | =project-compile=                  | Run =compile= in the project root.                                                    |
| =C-x p e= | =project-eshell=                   | Start Eshell in the current project's root directory.                                 |
| =C-x p k= | =project-kill-buffers=             | Kill the buffers belonging to the current project.                                    |
| =C-x p p= | =project-switch-project=           | Switch to another project by running an Emacs command.                                |
| =C-x p g= | =project-find-regexp=              | Find all matches for REGEXP in the current project's roots.                           |
| =C-x p G= | =project-or-external-find-regexp=  | Find all matches for REGEXP in the project roots or external roots.                   |
| =C-x p r= | =project-query-replace-regexp=     | Query-replace REGEXP in all the files of the project.                                 |
| =C-x p x= | =project-execute-extended-command= | Execute an extended command in project root.                                          |

*** Balanced Expressions
:PROPERTIES:
:CUSTOM_ID: balanced-expressions
:END:
| Shortcut | Command Invoked    | Description                          |
|----------+--------------------+--------------------------------------|
| =C-M-f=    | =forward-sexp=       | Forward over an sexps.               |
| =C-M-b=    | =backward-sexp=      | Backward over a sexps.               |
| =C-M-d=    | =down-list=          | Move down into a sexps.              |
| =C-M-u=    | =backward-up-list=   | Move up out of a sexps.              |
| =C-M-n=    | =forward-list=       | Move forward to the sexps.           |
| =C-M-p=    | =backward-list=      | Move backward to the previous sexps. |
| =C-M-k=    | =kill-sexp=          | Kill down into sexps.                |
| =M-(=      | =insert-parentheses= | Wraps region in parenthesis.         |

*** Query Replace
:PROPERTIES:
:CUSTOM_ID: query-replace
:END:
| Shortcut | Command Invoked | Description                                                          |
|----------+-----------------+----------------------------------------------------------------------|
| =M-%=    | =query-replace= | Start a query replace operation.                                     |
| =!=      |                 | Replace all remaining matches in this buffer with no more questions. |
| =^=      |                 | Move point back to previous match.                                   |
| =u=      |                 | Undo previous replacement.                                           |
| =U=      |                 | undo all replacements.                                               |
| =E=      |                 | Edit the replacement string.                                         |

*** Xref
:PROPERTIES:
:CUSTOM_ID: xref
:END:
| Shortcut | Command Invoked       | Description                         |
|----------+-----------------------+-------------------------------------|
| =M-.=      | =xref-find-definitions= | Find definitions at point.          |
| =M-,=      | =xref-go-back=          | Pop marker and return.              |
| =M-?=      | =xref-find-references=  | Find references matching a pattern. |
| =C-M-.=    | =xref-find-apropos=     | Find symbols matching a pattern.    |

*** Bookmarks
:PROPERTIES:
:CUSTOM_ID: bookmarks
:END:
| Shortcut  | Command Invoked       | Description            |
|-----------+-----------------------+------------------------|
| =C-x r m= | =bookmark-set=        | Create / set bookmark. |
| =C-x r b= | =bookmark-jump=       | Open bookmark.         |
| =C-x r l= | =bookmark-bmenu-list= | List bookmarks.        |

*** Dired Buffer
:PROPERTIES:
:CUSTOM_ID: dired-buffer
:END:
| Shortcut | Command Invoked                  | Description                                                                  |
|----------+----------------------------------+------------------------------------------------------------------------------|
| =C-o=      | =dired-display-file=               | Preview file but stay in Dired buffer.                                       |
| =C-u k=    | =dired-do-kill-lines=              | Remove section.                                                              |
| =X=        | =dired-do-shell-command=           | Execute shell command on file.                                               |
| =Q=        | =dired-do-find-regexp-and-replace= | Query replace marked files, =<space>= accept, =n= decline and =C-x s= to save all. |
| =+=        | =dired-create-directory=           | Create directory.                                                            |
| =^=        | =dired-up-directory=               | Go up one directory.                                                         |
|          | =find-name-dired=                  | Recursively find a file.                                                     |

*** Interface To Spell (Ispell) and On The Fly Spell (Flyspell)
:PROPERTIES:
:CUSTOM_ID: interface-to-spell-ispell-and-on-the-fly-spell-flyspell
:END:
| Shortcut | Command Invoked                      | Description                                                                       |
|----------+--------------------------------------+-----------------------------------------------------------------------------------|
| =M $=    | =ispell-word=                        | Check and correct spelling of the word at point.                                  |
| =C-M i=  | =completion-at-point=                | Complete the word before point based on the spelling dictionary.                  |
| =M-TAB=  | =flyspell-auto-correct-word=         | Automatically corrects the current word at point, will also cycle between option. |
| =C-c $=  | =flyspell-correct-word-before-point= | Correct word before point.                                                        |

*** Org Buffer
:PROPERTIES:
:CUSTOM_ID: org-buffer
:END:
| Shortcut      | Command Invoked            | Description                                    |
|---------------+----------------------------+------------------------------------------------|
| =S-M-RET=     | =org-insert-todo-heading=  | Insert a new TODO entry below the current one. |
| =C-c / t=     | =org-match-sparse-tree=    | View todo items in a sparse tree.              |
| =C-c C-t=     | =org-todo=                 | Toggle todo item state.                        |
| =C-c C-s=     | =org-schedule=             | Schedule todo item.                            |
| =C-c C-d=     | =org-deadline=             | Add deadline to todo item.                     |
| =C-c [=       | =org-agenda-file-to-front= | Add file to agenda.                            |
| =C-c ]=       | =org-remove-file=          | Remove file to agenda.                         |
| =C-c .=       | =org-timestamp=            | Insert current date.                           |
| =C-c C-e=     | =org-export-dispatch=      | Open exporter.                                 |
| =C-c C-e #=   | =org-export-dispatch=      | Insert template.                               |
| =C-c C-e P x= | =org-export-dispatch=      | Export specific project.                       |

*** EWW
:PROPERTIES:
:CUSTOM_ID: eww
:END:
| Shortcut | Command Invoked      | Description                          |
|----------+----------------------+--------------------------------------|
| =B=      | =eww-list-bookmarks= | Display your bookmarks.              |
| =b=      | =eww-add-bookmark=   | Add the current page as a bookmark.  |
| =l=      | =eww-back-url=       | Go to the previously displayed page. |
| =r=      | =eww-forward-url=    | Go to the next displayed page.       |
| =g=      | =eww-reload=         | Reload the current page.             |
| =G=      | =eww=                | Go to a new address.                 |
| =H=      | =eww-list-histories= | Shows a list of your histories.      |
| =TAB=    | =shr-next-link=      | Skip to the next link.               |

*** Useful Commands
:PROPERTIES:
:CUSTOM_ID: useful-commands
:END:
| Command                  | Description                                                   |
|--------------------------+---------------------------------------------------------------|
| =keep-lines=             | Delete all lines not matching the provided regex.             |
| =flush-lines=            | Delete all lines matching the provided regex.                 |
| =sort-lines=             | Sort lines in region alphabetically.                          |
| =delete-duplicate-lines= | Delete all but one copy of any identical lines in the region. |
| =ff-find-other-file=     | Find the header or source file corresponding to this file.    |
** Vim Proficiency :terminal:keybindings:cheatsheet:vim:
:PROPERTIES:
:EXPORT_FILE_NAME: vim-cheats
:EXPORT_DATE: 2023-04-05
:EXPORT_HUGO_DRAFT: false
:END:

Although I don't use vim, it has good points for being easy *keyboard glue*. Why not learn both of the best worlds of Editors?

Apart from normal vim navigations and operators, These are some of the unique vim magics, which I haven't used at all.

*** Marks
:PROPERTIES:
:CUSTOM_ID: marks
:END:

This is the important one, I have not used this at all. Should try and make use of it. Although emacs ~mark-ring~ is alot better.

| Shortcut    | Description                                          |
|-------------+------------------------------------------------------|
| =`^=        | Last position of cursor in insert mode               |
| =`.=        | Last change in current buffer                        |
| =`"=        | Last exited current buffer                           |
| =`0=        | In last file edited                                  |
| =''=        | Back to line in current buffer where jumped from     |
| =``=        | Back to position in current buffer where jumped from |
| =`[=        | To beginning of previously changed or yanked text    |
| =`]=        | To end of previously changed or yanked text          |
| =`<=        | To beginning of last visual selection                |
| =`>=        | To end of last visual selection                      |
| =ma=        | Mark this cursor position as =a=                     |
| =`a=        | Jump to the cursor position =a=                      |
| ='a=        | Jump to the beginning of the line with position =a=  |
| =d'a=       | Delete from current line to line of mark =a=         |
| =d`a=       | Delete from current position to position of mark =a= |
| =c'a=       | Change text from current line to line of =a=         |
| =y`a=       | Yank text from current position to position of =a=   |
| =:marks=    | List all current marks                               |
| =:delm a=   | Delete mark =a=                                      |
| =:delm a-d= | Delete marks =a=, =b=, =c=, =d=                      |
| =:delm abc= | Delete marks =a=, =b=, =c=                           |

--------

*** Navigation
:PROPERTIES:
:CUSTOM_ID: navigation
:END:
| Shortcut       | Description                |
|----------------+----------------------------|
| =%=            | Nearest/matching ={[()]}=  |
| =[(= =[{= =[<= | Previous =(= or ={= or =<= |
| =])=           | Next                       |
| =[m=           | Previous method start      |
| =[M=           | Previous method end        |

--------

*** Jumping
:PROPERTIES:
:CUSTOM_ID: jumping
:END:
| Shortcut | Description                  |
|----------+------------------------------|
| =<C-O>=  | Go back to previous location |
| =<C-I>=  | Go forward                   |
| =gf=     | Go to file in cursor         |

--------

*** Counters
:PROPERTIES:
:CUSTOM_ID: counters
:END:
| Shortcut | Description      |
|----------+------------------|
| =<C-A>=  | Increment number |
| =<C-X>=  | Decrement        |

--------

*** Tags
:PROPERTIES:
:CUSTOM_ID: tags
:END:
| Shortcut             | Description                                     |
|----------------------+-------------------------------------------------|
| =:tag Classname=     | Jump to first definition of Classname           |
| =<C-]>=              | Jump to definition                              |
| =g]=                 | See all definitions                             |
| =<C-T>=              | Go back to last tag                             |
| =<C-O> <C-I>=        | Back/forward                                    |
| =:tselect Classname= | Find definitions of Classname                   |
| =:tjump Classname=   | Find definitions of Classname (auto-select 1st) |

--------

*** Folds
:PROPERTIES:
:CUSTOM_ID: folds
:END:
| Shortcut      | Description                  |
|---------------+------------------------------|
| =zo= /// =zO= | Open                         |
| =zc= /// =zC= | Close                        |
| =za= /// =zA= | Toggle                       |
| =zv=          | Open folds for this line     |
| =zM=          | Close all                    |
| =zR=          | Open all                     |
| =zm=          | Fold more /(foldlevel += 1)/ |
| =zr=          | Fold less /(foldlevel -= 1)/ |
| =zx=          | Update folds                 |

--------

*** Command line
:PROPERTIES:
:CUSTOM_ID: command-line
:END:
| Shortcut     | Description                               |
|--------------+-------------------------------------------|
| =<C-R><C-W>= | Insert current word into the command line |
| =<C-R>"=     | Paste from ‚Äù register                     |
| =<C-X><C-F>= | Auto-completion of path in insert mode    |

--------

*** Spell checking
:PROPERTIES:
:CUSTOM_ID: spell-checking
:END:
| Shortcut                     | Description                                            |
|------------------------------+--------------------------------------------------------|
| =:set spell spelllang=en_us= | Turn on US English spell checking                      |
| =]s=                         | Move to next misspelled word after the cursor          |
| =[s=                         | Move to previous misspelled word before the cursor     |
| =z==                         | Suggest spellings for the word under/after the cursor  |
| =zg=                         | Add word to spell list                                 |
| =zw=                         | Mark word as bad/mispelling                            |
| =zu= / =C-X (Insert Mode)=   | Suggest words for bad word under cursor from spellfile |

See =:help spell=

--------

Source of this cheatsheet : [[https://devhints.io/vim]]

With that noted, I hope you turn out to be a proficient /*Vimmer*/ or an efficient /*Emacser*/

For emacs, I have my previous post for it.
** Linux : The Matrix :terminal:cheatsheet:minimal:
:PROPERTIES:
:EXPORT_FILE_NAME: linux-cheatsheet
:EXPORT_DATE: 2023-04-12
:EXPORT_HUGO_DRAFT: false
:END:

There are tons of linux command line cheatsheet or guides.

Here are some of the best reads, I suggest you to go throught each of it, *It's a gem*.


+ [[https://github.com/jlevy/the-art-of-command-line][The Art of Command Line]] ‚Äî notes and tips on using the command-line, suitable for both beginners and experienced users.
+ [[https://www.commandlinefu.com/commands/browse/sort-by-votes][commandlinefu]] ‚Äî command-line gems, includes a handy search feature.
+ [[https://github.com/tldr-pages/tldr][tldr]] ‚Äî collection of community-maintained help pages for command-line tools.
+ [[https://explainshell.com/][explainshell]] ‚Äî write down a command-line to see the help text that matches each argument.
+ [[http://www.compciv.org/unix-tools/][General purpose command-line tools]] ‚Äî examples for most common usecases.
+ [[https://devmanual.gentoo.org/tools-reference/bash/index.html][Bash reference cheatsheet]] ‚Äî nicely formatted and explained well.
+ [[https://devhints.io/bash][Bash scripting cheatsheet]] ‚Äî quick reference to getting started with Bash scripting.

--------------

#+begin_center
*With that ~coded~, I hope you enjoy the terminal. Unleash the Matrix*.
#+end_center
** FOSS : On Droid :fossdroid:android:
:PROPERTIES:
:EXPORT_FILE_NAME: foss-droid
:EXPORT_DATE: 2023-04-25
:EXPORT_HUGO_DRAFT: false
:END:

As we know, Android is widely popular OS for many phone. But these days its all filled with junks and bloated apps, these are to say so called *"Popular Android Apps"* or *"Trending Apps"*. The reason simply would be "everyone in my circle uses it" or "I use it because _they_ use it".

But surely you are not giving yourself some privacy or *space* that you need for your own *personal phone*.
I'm talking about using Free/Libre and Open Source (FOSS) Apps. Free doesn't mean by price, Free means *Freedom*. Freedom that comes with :
  - No Trackers.
  - No Ads.
  - Minimal permission.
  - Has customization to users need.
  - No Restrictions.

These can be achieved in this modern time, by Discovering and using FOSS Apps, the best place being [[https://f-droid.org][F-droid]]  or [[https://libreddit.kavin.rocks/r/fossdroid][r/fossdroid]].

There are pretty much all apps under FOSS area for every purpose, they are good looking with *Modern UI*, *Lots of Customizations* and *friendly with Battery*.

I happened to search for book and novel reader and found very good apps there, like QuickNovel.
There is a Manga reader and lots more for every purpose.

I exclusively use every apps from F-droid, because they are great.
You should also use it, as you might find something interesting and surely, gets Surprised; and say in your head, */Gosh I should have known this before/*.

------

Some of the cool apps I use everyday :

| Class                          | Apps                                   |
|--------------------------------+----------------------------------------|
| Launcher                       | Kv√¶sitso ([[https://apt.izzysoft.de/fdroid/index/apk/de.mm20.launcher2.release][izzydroid]], [[https://github.com/MM2-0/Kvaesitso][git]])              |
| F-droid Client                 | Neo Store ([[https://f-droid.org/en/packages/com.machiav3lli.fdroid/][fdroid]], [[https://github.com/NeoApplications/Neo-Store][git]])                |
| Browser                        | Mull ([[https://f-droid.org/en/packages/us.spotco.fennec_dos/][fdroid]], [[https://gitlab.com/divested-mobile/mull-fenix][git]])                     |
| Rss Reader                     | Read You ([[https://f-droid.org/en/packages/me.ash.reader/][fdroid]], [[https://github.com/Ashinch/ReadYou][git]])                 |
| YouTube                        | LibreTube ([[https://f-droid.org/en/packages/com.github.libretube/][fdroid]], [[https://github.com/libre-tube/LibreTube][git]])                |
| PDF/Ebook Reader               | Librera Reader ([[https://f-droid.org/en/packages/com.foobnix.pro.pdf.reader/][fdroid]], [[https://github.com/foobnix/LibreraReader][git]])           |
| Manga Reader                   | Tachiyomi ([[https://f-droid.org/en/packages/eu.kanade.tachiyomi/][fdroid]], [[https://github.com/tachiyomiorg/tachiyomi][git]])                |
| Password Manager               | KeePassDX ([[https://f-droid.org/en/packages/com.kunzisoft.keepass.libre/][fdroid]], [[https://github.com/Kunzisoft/KeePassDX][git]])                |
| Novel Reader                   | QuickNovel ([[https://apt.izzysoft.de/fdroid/index/apk/com.lagradost.quicknovel][izzydroid]], [[https://github.com/LagradOst/QuickNovel][git]])            |
| Keyboard                       | Unexpected Keyboard ([[https://f-droid.org/en/packages/juloo.keyboard2/][fdroid]], [[https://github.com/Julow/Unexpected-Keyboard][git]])      |
| Media Player                   | VLC ([[https://f-droid.org/en/packages/org.videolan.vlc/][fdroid]], [[https://code.videolan.org/videolan/vlc-android][git]])                      |
| Gallery + Calendar (many more) | Simple Tools Suite ([[https://search.f-droid.org/?lang=en&q=simple+tools][fdroid]], [[https://github.com/SimpleMobileTools][git]], [[https://simplemobiletools.com][site]]) |
| Note Taking                    | Orgzly ([[https://f-droid.org/en/packages/com.orgzly/][fdroid]], [[https://github.com/orgzly/orgzly-android][git]])                   |

------

#+begin_center
With that fossed, I hope your phone gets a new life and finally breathes alive!
#+end_center
** Nix Learning :linux:resources:nixos:
:PROPERTIES:
:EXPORT_FILE_NAME: nix-learning
:EXPORT_DATE: 2023-05-03
:EXPORT_HUGO_DRAFT: false
:END:

NixOS is definitely an advanced Linux distro, but it ain't easy to understand overnight or like Archlinux to have easy manual, but it sure has alot on the table. There is whole bunch of families like Nix functional language, Nix package manager... so and on with the prefix "nix".

This is really confusing, many hate nix and are not convinced to go long run just because of this difficulty (mess?). To make a simple thing work as expected, you need to go through such a rabbit hole.
But once you know Nix* (families), everything will make sense, and you would feel bad to go back to old traditional Linux manners.

These are some of the learning resources, which are rich in content and nonetheless, will be confusing at some point. But engineers do have spared their time in writing these, taking actions, to reach some audience and solve some of the caveats of Nix. So dig through and learn new ;)

*** nix-learning

**** Uncategorized
:PROPERTIES:
:CUSTOM_ID: uncategorized
:END:
- [[https://youtu.be/m4sv2M9jRLg][Nix Fundamentals]] (Video)
- [[https://stephank.nl/p/2020-06-01-a-nix-primer-by-a-newcomer.html][A Nix terminology primer by a newcomer]] - St√©phan Kochen
- [[https://shopify.engineering/what-is-nix][What Is Nix]]
- [[https://nasirhm.github.io/posts/getting-started-with-nix-introduction/][Getting Started With Nix: Introduction]] - Nasir Hussain
- [[https://blog.sulami.xyz/posts/nix-for-developers/][Lightning
  Introduction to Nix for Developers]] - Robin Schroer
- [[https://blog.knightsofthelambdacalcul.us/posts/2020-06-20-nix-nixos-thoughts/][Nix(OS)
  Thoughts]] - ?
- [[https://fzakaria.com/2020/11/17/on-demand-linked-libraries-for-nix.html][On-demand
  linked libraries for Nix]] - Farid Zakaria
- [[https://serokell.io/blog/what-is-nix][What Is Nix and Why You Should
  Use It]] - ?
- [[https://push.cx/2018/nixos][NixOS on prgmr and Failing to Learn
  Nix]] - Peter Bhat Harkins
- [[https://www.tweag.io/blog/2020-09-10-nix-cas/][Towards a
  content-addressed model for Nix]] - Th√©ophane Hufschmitt
- [[https://lucperkins.dev/blog/nix-channel/][The easiest way (I've
  found) to create your own Nix channel]] - Luc Perkins
- [[https://www.johnbcoughlin.com/posts/nix-dynamic-linking/][Debugging
  a dynamic linking bug in a Nix project]] - Jack Coughlin
- [[https://notes.neeasade.net/adhoc-executable-patching-on-nix.html][adhoc
  executable patching on nixos]] - ?
- [[https://maxmcd.com/posts/strategies-for-binary-relocation/][Strategies
  for Binary Relocation In Functional Build Systems]] - Max McDonnell
- [[https://christine.website/blog/how-i-start-nix-2020-03-08][How I
  Start: Nix]] - Christine Dodrill
- [[https://christine.website/blog/i-was-wrong-about-nix-2020-02-10][I
  was Wrong about Nix]] - Christine Dodrill
- [[https://www.infoq.com/articles/configuration-management-with-nix/][Purely
  Functional Configuration Management with Nix and NixOS]] - Eelco
  Dolstra
- [[https://bgottlob.com/post/2019-05-29-nix-use-cases/][Basic Use-Cases
  of the Nix Package Manager]] - Brandon Gottlob
- [[https://thomazleite.com/posts/development-with-nix-python/][Development
  with Nix: Python]] - Thomaz Leite
- [[https://medium.com/dapphub/dapp-tools-and-the-nix-package-manager-c4c692c87310][Dapp
  tools and the Nix package manager]] - Mikael Brockman
- [[http://gfxmonk.net/2015/01/03/nixos-and-stateless-deployment.html][NixOS
  and Stateless Deployment]] - ?
- [[https://christine.website/blog/nixos-encrypted-secrets-2021-01-20][Encrypted
  Secrets with NixOS]] - Christine Dodrill
- [[https://begriffs.com/posts/2016-08-08-intro-to-nixos.html][Purely
  Functional Linux with NixOS]] - Joe Nelson
- [[https://www.tweag.io/blog/2018-03-15-bazel-nix/][Nix + Bazel = fully
  reproducible, incremental builds]] - Mathieu Boespflug, Th√©ophane
  Hufschmitt
- [[https://zenhack.net/2016/01/24/reflections-on-nixos.html][Reflections
  On NixOS]] - Ian Denhardt
- [[https://blog.mayflower.de/5800-Hardening-Compiler-Flags-for-NixOS.html][Hardening
  Compiler Flags for NixOS]] - Franz Pletz
- [[https://hugoreeves.com/posts/2019/nix-home/][Your home in Nix
  (dotfile management)]] - Hugo Reeves
- [[https://christine.website/blog/nixos-desktop-flow-2020-04-25][My
  NixOS Desktop Flow]] - Christine Dodrill
- [[https://tailscale.com/blog/nixos-minecraft/][Tailscale on NixOS: A
  new Minecraft server in ten minutes]] - Christine Dodrill
- [[https://terinstock.com/post/2021/01/Setting-up-a-git-server-on-NixOS/][Setting
  up a git server on NixOS]] - Terin Stock
- [[https://myme.no/posts/2020-01-26-nixos-for-development.html][NixOS:
  For developers]] - Martin Myrseth
- [[https://myme.no/posts/2019-07-01-nixos-into-the-deep-end.html][NixOS:
  Into the deep end]] - Martin Myrseth
- [[https://rgoswami.me/posts/ccon-tut-nix/][A Tutorial Introduction to
  Nix]] - Rohit Goswami
- [[https://zimbatm.com/benchmark-nixpkgs][Benchmarking nixpkgs
  builds]] - Jonas Chevalier
- [[https://zimbatm.com/experiment-recursive-nix][Recursive Nix
  experiment]] - Jonas Chevalier
- [[https://zimbatm.com/deploying-k8s-apps-with-kubenix][Deploying
  Kubernetes apps with KubeNix]] - Jonas Chevalier
- [[https://github.com/tazjin/nix-1p][Nix - A One Pager]] - Vincent Ambo
- [[https://foo-dogsquared.github.io/blog/posts/moving-into-nixos/][Moving
  into NixOS]] - Gabriel Arazas
- [[https://www.willghatch.net/blog/2020/06/27/nixos-the-good-the-bad-and-the-ugly/][NixOS:
  the good, the bad, and the ugly]] - William G Hatch
- [[https://www.nmattia.com/posts/2018-03-21-nix-reproducible-setup-linux-macos.html][Nix:
  A Reproducible Setup for Linux and macOS]] - Nicolas Mattia
- [[https://www.nmattia.com/posts/2019-01-15-easy-peasy-nix-versions.html][Easy
  Peasy Nix Versions]] - Nicolas Mattia
- [[https://www.nmattia.com/posts/2019-10-08-runtime-dependencies][Recovering
  Nix derivation attributes of runtime dependencies]] - Nicolas Mattia

#+begin_html
  <!-- TODO: add more from their website -->
#+end_html

- [[https://ops.functionalalgebra.com/nix-by-example/][Nix By
  Example]] - Susan Potter
- [[https://ops.functionalalgebra.com/nixops-by-example/][NixOps By
  Example]] - Susan Potter
- [[https://ops.functionalalgebra.com/nixos-by-example/][NixOS By
  Example]] - Susan Potter
- [[https://ops.functionalalgebra.com/2018/04/18/inspecting-nix-lambda-named-arguments/][Inspecting
  Nix lambda function named arguments]] - Susan Potter

#+begin_html
  <!-- TODO: add Tweag Nix flakes -->
#+end_html

**** Overview
:PROPERTIES:
:CUSTOM_ID: overview
:END:
- [[https://web.archive.org/web/20210123223258/https://ebzzry.io/en/nix/][A
  Gentle Introduction to the Nix Family]]

**** Nix the language
:PROPERTIES:
:CUSTOM_ID: nix-the-language
:END:
- [[https://nixcloud.io/tour][A tour of Nix]] - an introduction to the
  Nix Programming Language

**** Nix Shell
:PROPERTIES:
:CUSTOM_ID: nix-shell
:END:
- [[https://ghedam.at/15978/an-introduction-to-nix-shell][An
  introduction to nix-shell]] - Mattia Gheda
- [[https://fzakaria.com/2020/08/11/caching-your-nix-shell.html][caching
  your nix-shell]] - Farid Zakaria

**** Nix Flakes
:PROPERTIES:
:CUSTOM_ID: nix-flakes
:END:
- [[https://blog.ysndr.de/posts/internals/2021-01-01-flake-ification/][Building
  with Nix Flakes for, eh .. reasons!]] - Yannik Sander
- [[https://zimbatm.com/NixFlakes/][Nix Flakes edition]] - Jonas
  Chevalier

**** Experience
:PROPERTIES:
:CUSTOM_ID: experience
:END:
- [[https://catgirl.ai/log/nixos-experience/][Eight Months of NixOS]] -
  ash
- [[https://tech.channable.com/posts/2021-04-09-nix-is-the-ultimate-devops-toolkit.html][Nix
  is the ultimate DevOps toolkit]] - Ruud van Asseldonk, Reinier Maas,
  Falco Peijnenburg, Fabian Thorand, and Robert Kreuzer

**** Language Specific
:PROPERTIES:
:CUSTOM_ID: language-specific
:END:
***** Java
:PROPERTIES:
:CUSTOM_ID: java
:END:
- [[https://fzakaria.com/2020/07/20/packaging-a-maven-application-with-nix.html][Packaging
  a Maven application with Nix]]

***** Elixir
:PROPERTIES:
:CUSTOM_ID: elixir
:END:
- [[https://ejpcmac.net/blog/using-nix-in-elixir-projects/][Using Nix in
  Elixir projects]] - Jean-Philippe

***** C++
:PROPERTIES:
:CUSTOM_ID: c
:END:
- [[https://blog.galowicz.de/2019/04/17/tutorial_nix_cpp_setup/][Setting
  up a C++ project environment with nix]] - Jacek Galowicz

***** Rust
:PROPERTIES:
:CUSTOM_ID: rust
:END:
- Managing Rust Dependencies with Nix - James Kay
  - [[https://hadean.com/blog/managing-rust-dependencies-with-nix-part-i/][Part
    1]]
  - [[https://hadean.com/blog/managing-rust-dependencies-with-nix-part-ii/][Part
    2]]

**** Series
:PROPERTIES:
:CUSTOM_ID: series
:END:
- Nix by Example - James Fisher
  - [[https://medium.com/@MrJamesFisher/nix-by-example-a0063a1a4c55][Part
    1: The Nix expression language]]
- Ian Henry's /How to Learn Nix/ series
  - [[https://ianthehenry.com/posts/how-to-learn-nix/introduction/][Part
    1: What's all this about?]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/prior-knowledge/][Part
    2: Prior knowledge]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/glossary/][Part 3:
    What we talk about when we talk about Nix]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/quick-start-guide/][Part
    4: Quick starts, full hearts]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/basic-package-management/][Part
    5: Basic package management]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/profiles/][Part 6:
    Profiles]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/garbage-collection/][Part
    7: Garbage collection]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/channels/][Part 8:
    Channels]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/sharing/][Part 9:
    Learning to share]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/my-first-derivation/][Part
    10: My first derivation]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/okay-my-actual-first-derivation/][Part
    11: Okay my actual first derivation]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/nix-language/][Part
    12: The Nix expression language]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/derivations/][Part
    13: Derivations]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/built-in-functions/][Part
    14: Built-in Functions]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/advanced-topics/][Part
    15: Advanced Topics]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/command-reference/][Part
    16: Command Reference]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/configuration/][Part
    17: Configuration]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/nix-manual-reflection/][Part
    18: So I read the manual huh]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/][Part
    19: Switching from Homebrew to Nix]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/my-first-nix-bug/][Part
    20: My first Nix bug]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/my-first-package-upgrade/][Part
    21: My first package upgrade]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/declarative-user-environment/][Part
    22: Setting up a declarative user environment]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/how-to-learn-nixpkgs/][Part
    23: How to learn Nixpkgs]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/overlays/][Part 24:
    Overlays]]
  - [[https://ianthehenry.com/posts/how-to-learn-nix/overriding/][Part
    25: Overriding]]

------

These links are extracted from humancalico's git repo (https://github.com/humancalico/nix-learning).

#+begin_center
With that sorted, I hope learning becomes good ;)
#+end_center
** Nix: Home for Acer :linux:nixos:
:PROPERTIES:
:EXPORT_FILE_NAME: nix-acer
:EXPORT_DATE: 2023-10-21
:EXPORT_HUGO_DRAFT: false
:END:

In this post am sharing some of the experience of using my new laptop, *Acer swift Go Oled*. Compact, Premium ultra-book with Oled, Yes, a good hand made mobile laptop.

As expected and as usual, it got windows 11 and first major encounter was heating and battery issue. It got me scared as it felt wrong decision. Since many claimed windows gives better battery life than Linux. It gave me nightmare of installing Linux too, really, new laptop with 4-5 hours of battery, for oled with black screens?

Anyways, windows made me really tinker to my needs, went on with ~winutils~ and de-bloated few stuffs and made it somewhat tacit for me, then too I demanded more of it. To which windows felt weird and too much to handle. Thus did finally decide to dual boot or straightaway to erase disk for Linux. My first thought of choice was to use Arch with gnome, but since I had well maintained [[https://github.com/idlip/d-nix][nixos config]], I went with same config without much a-due.

Viola it gave me the exact setup I was looking for, enabling my hand to feel back in pace. Yet I was worried about battery and heating point of view, although many say, =laptops arent made to run on battery=, yet the heat? the air exhaust hitting my oled display directly?.

I gave a shot to ~auto-cpufreq~, it did a well decent job, yet I felt too little gain, I did change =intel_pstate= to =acpu= one. All i noticed is it lowered the max frequency rate from 4.3GHz to 3.2GHz.

Later on after many rebuilds, I saw Nixos [[https://nixos.wiki/wiki/Laptop][wiki on laptop]], may seem outdated, but it was legit, and I did enable service such as ~thermald~, ~tlp~ and viola later on I noticed it works well. Seriously I don't know how, it gave me better battery life, less heating in Linux (nixos) than windows. Maybe magical to me as others claim vice-versa.

Nonetheless, nixos handled the magics of services and making it a better experience by just writing one line of configs to =true;=. My desktop runs Hyprland (wayland) and it works flawlessly.

Okay, let me tell you about Finger Print, it gave me little trouble, and funny enough, it was again just to say ~true;~ on a line.

I have FP, so obviously I wanted to be cool looking by using it, I initially did not expect FP to work, again online poeple said so. I was following some debian/ubuntu help on FP and enabling some drivers and all, it did not work. Later I gotta know that ~fprintd~ latest one already has the support for my FP id, so just did enable ~fprintd~ and viola! viola!, now I login in TTY with FingerPrint.

Although I wasted some time one tinkering and making it to work on my needs, I was not doing work I wanted, thus decided to settle and do productive tasks from then on. Anyway, whatever you customize it will be little to no gain. That's why I decided to make and get my blog going, it is better to make one day each month or on boring holiday to do cleaning and customizing on OS.

Finally, It has become a pleasant experience to get nix and make it work as I expected on *Acer*.

Yet one thing remains unexplored, fan controlling. I see no mention of fan or _RPM_ via ~sensors~ command, so one way is to check another tool. I skipped that part, since I don't face heating issue or high fan noise even when I'm plugged in.

Ultimately one more thing making all experience better is the *GOAT Emacs*. Bringing back my config and using it with more speed is another level of bliss.

This has become another embark of a journey, where the todo's are just piling even more, and it looks fun to explore more and utilize efficiently for learning.
** Emacs on Droid
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-droid
:EXPORT_DATE: 2023-12-16
:EXPORT_HUGO_DRAFT: false
:END:

Emacs is a definite Greatest editor of all time, the extensibility power is unmatched with any other software. Users of Emacs can only know what it is, one who has not used it may not really understand the principles and power it gives us, the users.

Once settled with it on PC, its not late to think of something similar for our handy pocket phones, at least support for *org-mode* so we organize our life. The research leads us to find apps, and its unfortunate that market has lots of apps supporting markdown, just for its markup. Even org-mode is good for markup only, Karl voit's [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][post]] explains it very well.

Finally we have some apps for org-mode, namely on Android [[https://github.com/orgzly/orgzly-android][Orgzly]] (maintained: [[https://github.com/orgzly-revived/orgzly-android-revived][orgzly-revived]]), Orgro (read-only app) and there is [[https://organice.200ok.ch/][Organice]] (PWA site, unique, supports desktop).
Surprisingly IOS has many apps for org-mode, namely [[https://beorgapp.com/][beorg]] and [[https://plainorg.com/][plain org]] (I dont use IOS, so please search app store).

New project under development [[https://github.com/Artawower/orgnote-client][OrgNote]] also looks promising.

But it was near February, 2023, that Po Lu, one of the Emacs developer, started and released support for touch-screen devices (including Android) and to our surprise it was *the graphical Emacs*, available now on Android. But before trying the first doubts and cons expected was that it does not work well with virtual keyboard, so only good option is to carry physical keyboard everywhere?
That could be solved by getting adjusted to keyboard app called "Hackers Keyboard" (TODO link).

But as I dug deep, the developer Po Lu, was on telegram channel in disguise, as I pointed that emacs android needed android's share feature (like open-with) to other people, he had seen it and implemented is very quickly. It shows how much of an interesting take-up it is.

Orgzly actually satisfied org-mode and agenda things with help of syncthing over org directory. But the next bummer came when I fell in love with [[https://github.com/skeeto/elfeed][Elfeed]] (RSS reader) and badly wanted to read feeds in sync with my phone. Since Emacs officially made its way for Android, so why not open some doors, indeed it did gave the power of emacs-lisp!

Initially I started with bare-bone config, and later tried to incorporate my PC config with android, and it was easy, without much hassle. Just had to define a constant to check if system is on Linux or Android, and use the keyword in condition statements and =use-package=. Next thought would be to use Unix tools/commands, so it only leads to Termux, and after few days, the developer released Termux signed apk to use in conjunction with emacs, so as to leverage the command line utilities in Android emacs too, namely ~ripgrep~, ~git~. I have not tried ~image-magick~, ~mupdf~ for =pdf-tools=. But frankly [[https://github.com/foobnix/LibreraReader][Librera reader]] is good enough.

Here is a [[https://marek-g.github.io/posts/tips_and_tricks/emacs_on_android/][blog post]] by marek-g explaining how termux is modified to use with Emacs

Note: Fdroid emacs apk lacks some support like GnuTLS (so won't be able to install package or use eww), thus the only source to get emacs builds for Android is https://sourceforge.net/projects/android-ports-for-gnu-emacs

For anyone trying it out again or newly, please make sure you go through =C-h R android= or =C-h r m android= for frequent issues or things to know for Android build. For any queries to me, please feel free to open up an issue over this [[https://github.com/idlip/d-nix][repo]].

Overall with setting only few variables for android specifically, I replicated almost same emacs config on Android. The definite org-mode reader, read Elfeed feeds in sync with PC, whatever emacs packages you use.

Config just for android exclusively:
#+begin_src emacs-lisp
;; define constant to check if system is android
(defconst d/on-droid (eq system-type 'android))
;; if system is android, executes following code
(when d/on-droid
  (custom-set-variables
   '(touch-screen-precision-scroll t) ;; smooth scrolling
   '(touch-screen-display-keyboard t)
   ;; ^ display virtual keyboard when touch on phone screen
   ;; does not work on read-only buffer (dashboard, startup..)
   '(browse-url-android-share t))
  ;; open links/urls with android's open-with or share kinda popup

  (defun d/key-droid()
    "To enable touch screen keyboard"
    (interactive)
    (frame-toggle-on-screen-keyboard (selected-frame) nil)
    )
  )
#+end_src

I'm not sure how suitable it is for coding environment (with lsp and complexities), but it behaves as expected for reading purpose and for quick note taking. I should probably say, it excels in that segment.
