#+hugo_base_dir: ../
#+hugo_section: posts
#+OPTIONS: toc:2

    
* Posts
** Tools that are Best! :terminal:cli:linux:minimal:tools:
   :PROPERTIES:
   :EXPORT_FILE_NAME: tools-readme
   :EXPORT_DATE: 2023-03-17
   :EXPORT_HUGO_DRAFT: false
   :END:

--------------

*** Utilities that are Best! üåü
--------------

|-------------------------+-------------------------------------|
| Class                   | Name                                |
|-------------------------+-------------------------------------|
| Window Manager          | [[https://hyprland.org/][Hyprland]] üå∏                         |
| Text Editor             | [[https://www.gnu.org/software/emacs/][Emacs]] üíÆ                            |
| Gtk Theme               | [[https://github.com/Fausto-Korpsvart/Gruvbox-GTK-Theme][Gruvbox]] / [[https://github.com/vinceliuice/Orchis-theme][Orchis]] üé®                 |
| Font                    | [[https://tosche.net/fonts/comic-code][Comic Code]] / [[https://github.com/dtinth/comic-mono-font][Comic Mono]] / [[https://github.com/tonsky/FiraCode][Fira Code]] |
| Pdf Reader              | [[https://github.com/ahrm/sioyek][Sioyek]] üìî (ditch zathura)           |
| Media Player            | [[https://mpv.io][MPV!]] üé¨ (its MVP too)               |
| Image Viewer            | [[https://sr.ht/~exec64/imv/][Imv]] üñºÔ∏è                              |
| RSS Reader              | [[https://github.com/skeeto/elfeed][Elfeed]] üì∞ (Again, Emacs)            |
| Music Player            | [[https://github.com/ncmpcpp/ncmpcpp][Ncmpcpp]] or [[https://github.com//mingus][Mingus in Emacs]] üé∂       |
| Terminal                | [[https://codeberg.org/dnkl/foot][Foot]] via footclient ‚öΩ              |
| Menu/Launcher           | [[https://github.com/davatorium/rofi][Rofi]] üöÄ                             |
| Notification            | [[https://github.com/dunst/dunst][Dunst]]  üõéÔ∏è                           |
| Shell                   | [[https://zsh.org][Zshell]] with [[https://starship.rs][Starship]] üî∞             |
| Status Bar              | [[https://github.com/Alexays/Waybar][Waybar]]  üç•                          |
| Favourite Color-Schemes | Modus-Vivendi + Gruvbox             |
|-------------------------+-------------------------------------|

#+begin_quote
Rest all other stuffs I do in Emacs, tbh I could do everything in Emacs lol.
#+end_quote


Feel free to comment down and ask me doubts or about some improvements, you wanna inform! I will be glad.
** My Linux Journey :distro:linux:
:PROPERTIES:
:EXPORT_FILE_NAME: linux-journey
:EXPORT_DATE: 2023-03-10
:EXPORT_HUGO_DRAFT: false
:END:


*Small info/log on my linux journey and my experience.*

/If you are reading this, I encourage you to write blogs like this and have it in your git repo. Don't forget to tag or inform me, I'd be glad to read your journey too!/

-----

Linux is not widely recommended or discussed topic among real life friends or circle, every system comes pre-installed with win-dows, and its no big surprise people don't have a feel towards their usage of OS.

Not many people update their system, not many try to explore Alternative softwares, they stick very much to the default out-of-the-box Application. Tbh if you deep dive and understand windows, it is total crap, *Obnoxious*.

My reason to switch over to Linux was simple as other had :
- No Freedom
- Slow win-dows
- Cannot even run the browser properly
- Cannot even do multitasking efficiently
- The bloatware crap were too much
- Updates are like *eternal sleep* (No-sense updates)

My linux journey was from Linux Mint > EndeavourOS > Arch Linux > and now NixOS.

*** The Embark

I started to explore some YouTube video on Linux (as a normie at that time), soon I got familiar with good explanation, thankfully CTT had made an Linux Mint playlist and it helped to installing the first and the best *Beginner Distro*, the *Linux Mint*.

The gain and experience was *Ultimate*. Loved it, felt the Freedom, felt the deeper understanding of a *real System*.

I choose the flagship Cinnamon DE and it was very comfortable.

After few months, I finally stumbled upon a drawback here, it was stable packages (old package versions).

That is when I saw the concept of *Rolling release*, at that time *EndeavourOS* was the flavor of Linux distro at that time, peaked the distrowatch and all. So guess what, I installed EvndeavourOs and expanded more love towards terminal and latest packages.

Soon i felt i did not needed what all EndeavourOS ships, I want custom or DIY (something i take control of), then i realized, EOS was arch-based, so guess again, went with the great Independent Arch linux.

Boom, the best linux journey (learning), I only mean it for learning, other than that Arch is just cool kids bag.

Finally, now with some other jolt of distro trend, I stumbled the name *"NixOS"*.
It is somewhat reinventing the wheel, but it is so different that I'd hate to even say it as a Linux distro, It stands unique with linux distros.

Tbh I loved LM and Arch alot, I was a devotee to Arch too, and I hated Nix when I tried, cause things were weird.
+ You won't know where to start nor what to refer
+ Flakes or home-manager, How to understand?
+ Do nix-env or rebuild all the time?
+ What files to edit to achieve same setup as my previous distro?

  These were all the things that I hated and was frustrated about, there was still many things that felt hard.
  I did leave Nix and install Arch few times back and forth, I was debating with myself and id my own research all over Internet.

  That is when I thought nix lacked Documentation or good YouTuber to speak of, I really wish one of them could explain and make it their distro to explain timely on things.

  Fine, somehow forced myself and came a long way of setting up Good working nixos config, now I'm on flakes.

  Nix is great if it works as expected or if we make it work, but, if I get stuck or the issue goes for days that is when I really hate Nix, because it ain't easy to solve some unique issues. Most of these apply for HomeManager actually, it adds more trouble.

  It is adviced to learn how Nix works or Nix as Functional Programming Language.

--------

Okay, so it was not about shilling Nix or anything, Just my Linux experience. 
** NixOS : Reproducible - Immutable :emacs:distro:linux:nixos:
   :PROPERTIES:
   :EXPORT_FILE_NAME: try-nixos
   :EXPORT_DATE: <2023-03-23 Thu>
   :EXPORT_HUGO_DRAFT: false
   :END:

--------------

Introduction part, you would better have read it on official nixos site ([[https://nixos.org]])

*** "Should you try NixOS?" ‚ùÑÔ∏è

Here answer from a non-programmer, who just browses and watches media.
Just don't, if you are looking for small benefit. *Don't!*
 regret having hard time to figure out petty things, again forget about error, you cannot even search in web.

But, if you have decided, go with it. According to me (non-programmer), these points are good to consider NixOS
 + You use Emacs (lol), *Emacs* ‚ù§Ô∏è  *Nix* is Match made in Heaven.
 + You want to declare stuffs and get same output, and forget what all you setup, cause its all declared in config.
 + You want an isolated environments (shell) to do some stuffs without involving whole system.
 + You want to stop troubleshooting and breaking update and are lazy to backup, and want to rollback with ease like with just a reboot.
 + You want to say I use *Nixos Btw*.
 + You don't want to worry about breaking your system nor fix something when you are updating system.
 + You are willing to learn (advanced) things and fine with steep learning curve.

--------------
   
*** How I manage my system üå≤

I manage my whole system with single org file. Its easy and pretty handy. You can read that file here *‚Ü¨* [[https://github.com/idlip/d-nix/blob/onepiece/d-setup.org][d-setup.org]] , its both self documenting and has all source code blocks.

Another key feature in my setup is, every file i tangle is at *read-only mode*. So generally we can avoid editing/touching them. Thus, every action has to be made in *d-setup.org* only.

Also, I have made files to be *symlink*, so i can edit them without requiring to rebuild whole thing!

--------------


**** Credits üéñÔ∏è

These configs were the inspiration and helped to build this way.

I thank them sincerely.

[[https://github.com/Iron-Shark/Technonomicon][Iron Shark]] *‚üπ* Made migrating to Single org-file config very easy.

[[https://github.com/sioodmy/dotfiles][Sioodmy]] *‚üπ* First config which I understand thoroughly and modified based on this.

------------------------------------------------------------------------------------------
** Imposter Syndrome : Formula for Success :phenomenon:success:skill:imposter:psychology:
:PROPERTIES:
:EXPORT_FILE_NAME: imposter-syndrome
:EXPORT_DATE: 2023-03-24
:EXPORT_HUGO_DRAFT: false
:END:

- Have you ever felt a fear of losing or doubt your own ability?
- Have you felt unworthy, lost your self esteem due to a mistake?
- Are you feeling constant fear of being discovered rather than being proud?

The matter is, is these sound true or happening at some moment, let me condition it as *"Imposted Syndrome"*.

You might remember the word "Imposter" from the most popular mobile game during lockdown, *Among us* ([[https://www.innersloth.com/games/among-us/][site]]), yeah as the name suggests it means one who deceives.

But imposter syndrome is seriously for real, a condition, which people do experience in their life. They don't usually realize or find its symptoms as it is in itself a _negative feeling_, provoking [[https://www.psychologytoday.com/intl/basics/anxiety][anxiety]] and [[https://www.psychologytoday.com/intl/basics/fear][fear]].


    + People with imposter syndrome feel inauthentic, question their own ability to be
    successful, and are convinced that they do not belong in the roles they stand, even
    when they experience success.

I myself have felt this, when I was starting out journey to learn new course (say programming language), I felt it was oceanic knowledge where I only had a boat.

*** Ways to stop Imposter Syndrome

#+begin_quote
/Where there is a will, there is a way./
#+end_quote


**** Trust the Process

   Reflect on your actions, see the world praising you. Instead of listening to the negative feeling from your head, listen to the feedback from others.

   - Others believe in you
   - You don't believe in yourself
   - Yet you believe yourself instead of them

   If you doubt yourself, shouldn't you also doubt your judgment of yourself?

**** Look for Evidence

   Fine you feel it that way, see if you can find evidence and measures. Think of some example where you have made some positive impact on others, how much change have you brought them.

**** Remember the Journey

   Look back at the steps you have taken, how was the process of learning from scratch, rock-bottom.

   /'It will get better and you'll be more proud of yourself.'/

**** Turn the Tables

   Make it a strenth, refrain from doubts. Those with imposter syndrome are more likely to say "I don't know" when they don't know. This is an advantage. Overconfident people assume they have all the answers, even when they don't.

    Humility, uncertainty, and self-doubt are part of the learning process. The key is to believe in your ability to learn.


**** Suggested Reads

If you want to explore more on this concepts :

1. [[https://www.psychologytoday.com/intl/blog/all-kids-thriving/202302/the-power-of-belonging][The Power of Belonging]]

2. [[https://www.psychologytoday.com/intl/blog/on-your-way-with-adhd/202302/the-connection-between-adhd-and-imposter-syndrome][Connection between ADHD and Imposter Syndrome]]
** Emacs Efficiency :minimal:cheatsheet:keybindings:emacs:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-keys
:EXPORT_DATE: 2023-03-29
:EXPORT_HUGO_DRAFT: false
:END:


This is straight away from [[https://github.com/VernonGrant/discovering-emacs][VernonGrant]] who hosts a podcast for Emacs called "[[https://www.discovering-emacs.com/][Discovering-Emacs]]".
It's a great and has very much professional vibes, the explanations are Crisp and Clear!
I suggest you to check out, he even has made [[https://www.youtube.com/@discoveringemacs][YouTube channel]] for it.

I have removed some of the common bindings from this table, I have retained some unique one's which isn't discovered generally. I guess that is why the name is made (lol)

I just wanted to have a cheatsheet for it, so I decided to leave it as a post here.

You can checkout the source here ‚üæ [[https://github.com/VernonGrant/emacs-keyboard-shortcuts]]

*** General Shortcuts

| Shortcut              | Command Invoked                  | Description                                                        |
|-----------------------+----------------------------------+--------------------------------------------------------------------|
| =C-x Esc Esc=         | =repeat-complex-command=         | Edit and re-evaluate last complex command.                         |
| =C-h f=               | =describe-function=              | Help information for a function.                                   |
| =C-h x=               | =describe-command=               | Help information for a command (a function available using =M-x=). |
| =C-h l=               | =view-lossage=                   | Show log for key presses and commands.                             |
| =M--=                 | =negative-argument=              | Prefix to perform negative meta commands.                          |
| =C--=                 | =negative-argument=              | Prefix to perform negative commands.                               |
| =M-l=                 | =downcase-word=                  | Lowercase word forward.                                            |
| =M-c=                 | =capitalize-word=                | Capitalize word forward.                                           |
| =M-u=                 | =upcase-word=                    | Uppercase word forward.                                            |
| =C-<space> C-<space>= | =set-mark-command=               | Add mark to mark ring.                                             |
| =C-u C-<space>=       | =set-mark-command=               | Jump to previous mark.                                             |
| =M-q=                 | =fill-paragraph=                 | Wrap/reformat to fill column.                                      |
| =M-^=                 | =delete-indentation=             | Join previous line.                                                |
| =M-- M-^=             | =delete-indentation=             | Join following line.                                               |
| =M-{=                 | =backward-paragraph=             | Previous paragraph.                                                |
| =M-}=                 | =forward-paragraph=              | Next paragraph.                                                    |
| =C-x C-v=             | =find-alternate-file=            | Find alternative file.                                             |
| =C-x i=               | =insert-file=                    | Insert file contents into the current file.                        |
| =C-x h=               | =mark-whole-buffer=              | Highlight entire buffer.                                           |
| =C-M-\=               | =indent-region=                  | Re-indent code region in region or from previous mark point.       |
| =C-x C-x=             | =exchange-point-and-mark=        | Put the mark where point is now, and point where the mark is now.  |
| =C-x C-j=             | =dired-jump=                     | Open Dired jump.                                                   |
| =C-x SPC=             | =rectangle-mark-mode=            | Rectangle edit mode, can use string-insert-rectangle.              |
| =C-x +=               | =balance-windows=                | Resize all splits to equal sizes.                                  |
| =C-x 5 2=             | =make-frame-command=             | Open in new frame.                                                 |
| =C-x r SPC=           | =point-to-register=              | Point-to-register.                                                 |
| =C-x r j=             | =jump-to-register=               | Jump-to-register.                                                  |
| =M-s o=               | =occur=                          | List lines using regex.                                            |
| =M-s h r=             | =highlight-regexp=               | Highlights regex expression (useful for presentations).            |
| =M-r=                 | =move-to-window-line-top-bottom= | Move cursor to top, middle and bottom.                             |
| =C-l=                 | =recenter-top-bottom=            | Move text in relation to the cursor, to top, middle and bottom.    |
| =M-!=                 | =shell-command=                  | Run a shell command.                                               |
| =M-&=                 | =async-shell-command=            | Async shell command.                                               |
| =C-u 0=               | =universal-argument=             | Infinite count prefix.                                             |
| =C-u {count}=         | =universal-argument=             | Repeat operation x amount of times.                                |
| =C-x z=               | =repeat=                         | Repeat command.                                                    |
| =C-x backspace=       | =backward-kill-sentence=         | Clear mini-buffer.                                                 |
| =M-g M-g=             | =goto-line=                      | Go to line.                                                        |
| =C-x 1=               | =delete-other-windows=           | Kill other windows.                                                |
| =M-z (char)=          | =zap-to-char=                    | Zap up to char.                                                    |
| =C-x * g=             | =calc-dispatch=                  | Eval in new buffer.                                                |
| =C-u M-x=             | =universal-argument=             | Run command with additional options.                               |

*** Macros
:PROPERTIES:
:CUSTOM_ID: macros
:END:
| Shortcut          | Command Invoked             | Description                                                            |
|-------------------+-----------------------------+------------------------------------------------------------------------|
| =C-x (=           | =kmacro-start-macro=        | Define keyboard macro.                                                 |
| =C-x )=           | =kmacro-end-macro=          | End keyboard macro definition.                                         |
| =C-x e=           | =kmacro-end-and-call-macro= | Playback keyboard macro, can just keep pressing =e= after first press. |
| =C-x C-k <space>= | =kmacro-step-edit-macro=    | Open keyboard macro debugger.                                          |
| =C-x C-k e=       | =edit-kbd-macro=            | Enter macro editor, (C-c C-c) to finish editing.                       |
| =C-x C-k n=       | =kmacro-name-last-macro=    | Save the keyboard macro for later use.                                 |
|                   | =insert-kbd-macro=          | Insert a saved macro into the file, in Emacs lisp.                     |

*** Project
:PROPERTIES:
:CUSTOM_ID: project
:END:
| Shortcut  | Command Invoked                    | Description                                                                           |
|-----------+------------------------------------+---------------------------------------------------------------------------------------|
| =C-x p != | =project-shell-command=            | Run =shell-command= in the current project's root directory.                          |
| =C-x p &= | =project-async-shell-command=      | Run =async-shell-command= in the current project's root directory.                    |
| =C-x p f= | =project-find-file=                | Visit a file (with completion) in the current project.                                |
| =C-x p F= | =project-or-external-find-file=    | Visit a file (with completion) in the current project or external roots.              |
| =C-x p b= | =project-switch-to-buffer=         | Display buffer in the selected window, for a buffer belonging to the current project. |
| =C-x p s= | =project-shell=                    | Start an inferior shell in the current project's root directory.                      |
| =C-x p d= | =project-find-dir=                 | Start Dired in a directory inside the current project.                                |
| =C-x p D= | =project-dired=                    | Start Dired in the current project's root.                                            |
| =C-x p v= | =project-vc-dir=                   | Run VC-Dir in the current project's root.                                             |
| =C-x p c= | =project-compile=                  | Run =compile= in the project root.                                                    |
| =C-x p e= | =project-eshell=                   | Start Eshell in the current project's root directory.                                 |
| =C-x p k= | =project-kill-buffers=             | Kill the buffers belonging to the current project.                                    |
| =C-x p p= | =project-switch-project=           | Switch to another project by running an Emacs command.                                |
| =C-x p g= | =project-find-regexp=              | Find all matches for REGEXP in the current project's roots.                           |
| =C-x p G= | =project-or-external-find-regexp=  | Find all matches for REGEXP in the project roots or external roots.                   |
| =C-x p r= | =project-query-replace-regexp=     | Query-replace REGEXP in all the files of the project.                                 |
| =C-x p x= | =project-execute-extended-command= | Execute an extended command in project root.                                          |

*** Balanced Expressions
:PROPERTIES:
:CUSTOM_ID: balanced-expressions
:END:
| Shortcut | Command Invoked    | Description                          |
|----------+--------------------+--------------------------------------|
| =C-M-f=    | =forward-sexp=       | Forward over an sexps.               |
| =C-M-b=    | =backward-sexp=      | Backward over a sexps.               |
| =C-M-d=    | =down-list=          | Move down into a sexps.              |
| =C-M-u=    | =backward-up-list=   | Move up out of a sexps.              |
| =C-M-n=    | =forward-list=       | Move forward to the sexps.           |
| =C-M-p=    | =backward-list=      | Move backward to the previous sexps. |
| =C-M-k=    | =kill-sexp=          | Kill down into sexps.                |
| =M-(=      | =insert-parentheses= | Wraps region in parenthesis.         |

*** Query Replace
:PROPERTIES:
:CUSTOM_ID: query-replace
:END:
| Shortcut | Command Invoked | Description                                                          |
|----------+-----------------+----------------------------------------------------------------------|
| =M-%=    | =query-replace= | Start a query replace operation.                                     |
| =!=      |                 | Replace all remaining matches in this buffer with no more questions. |
| =^=      |                 | Move point back to previous match.                                   |
| =u=      |                 | Undo previous replacement.                                           |
| =U=      |                 | undo all replacements.                                               |
| =E=      |                 | Edit the replacement string.                                         |

*** Xref
:PROPERTIES:
:CUSTOM_ID: xref
:END:
| Shortcut | Command Invoked       | Description                         |
|----------+-----------------------+-------------------------------------|
| =M-.=      | =xref-find-definitions= | Find definitions at point.          |
| =M-,=      | =xref-go-back=          | Pop marker and return.              |
| =M-?=      | =xref-find-references=  | Find references matching a pattern. |
| =C-M-.=    | =xref-find-apropos=     | Find symbols matching a pattern.    |

*** Bookmarks
:PROPERTIES:
:CUSTOM_ID: bookmarks
:END:
| Shortcut  | Command Invoked       | Description            |
|-----------+-----------------------+------------------------|
| =C-x r m= | =bookmark-set=        | Create / set bookmark. |
| =C-x r b= | =bookmark-jump=       | Open bookmark.         |
| =C-x r l= | =bookmark-bmenu-list= | List bookmarks.        |

*** Dired Buffer
:PROPERTIES:
:CUSTOM_ID: dired-buffer
:END:
| Shortcut | Command Invoked                  | Description                                                                  |
|----------+----------------------------------+------------------------------------------------------------------------------|
| =C-o=      | =dired-display-file=               | Preview file but stay in Dired buffer.                                       |
| =C-u k=    | =dired-do-kill-lines=              | Remove section.                                                              |
| =X=        | =dired-do-shell-command=           | Execute shell command on file.                                               |
| =Q=        | =dired-do-find-regexp-and-replace= | Query replace marked files, =<space>= accept, =n= decline and =C-x s= to save all. |
| =+=        | =dired-create-directory=           | Create directory.                                                            |
| =^=        | =dired-up-directory=               | Go up one directory.                                                         |
|          | =find-name-dired=                  | Recursively find a file.                                                     |

*** Interface To Spell (Ispell) and On The Fly Spell (Flyspell)
:PROPERTIES:
:CUSTOM_ID: interface-to-spell-ispell-and-on-the-fly-spell-flyspell
:END:
| Shortcut | Command Invoked                      | Description                                                                       |
|----------+--------------------------------------+-----------------------------------------------------------------------------------|
| =M $=    | =ispell-word=                        | Check and correct spelling of the word at point.                                  |
| =C-M i=  | =completion-at-point=                | Complete the word before point based on the spelling dictionary.                  |
| =M-TAB=  | =flyspell-auto-correct-word=         | Automatically corrects the current word at point, will also cycle between option. |
| =C-c $=  | =flyspell-correct-word-before-point= | Correct word before point.                                                        |

*** Org Buffer
:PROPERTIES:
:CUSTOM_ID: org-buffer
:END:
| Shortcut      | Command Invoked            | Description                                    |
|---------------+----------------------------+------------------------------------------------|
| =S-M-RET=     | =org-insert-todo-heading=  | Insert a new TODO entry below the current one. |
| =C-c / t=     | =org-match-sparse-tree=    | View todo items in a sparse tree.              |
| =C-c C-t=     | =org-todo=                 | Toggle todo item state.                        |
| =C-c C-s=     | =org-schedule=             | Schedule todo item.                            |
| =C-c C-d=     | =org-deadline=             | Add deadline to todo item.                     |
| =C-c [=       | =org-agenda-file-to-front= | Add file to agenda.                            |
| =C-c ]=       | =org-remove-file=          | Remove file to agenda.                         |
| =C-c .=       | =org-timestamp=            | Insert current date.                           |
| =C-c C-e=     | =org-export-dispatch=      | Open exporter.                                 |
| =C-c C-e #=   | =org-export-dispatch=      | Insert template.                               |
| =C-c C-e P x= | =org-export-dispatch=      | Export specific project.                       |

*** EWW
:PROPERTIES:
:CUSTOM_ID: eww
:END:
| Shortcut | Command Invoked      | Description                          |
|----------+----------------------+--------------------------------------|
| =B=      | =eww-list-bookmarks= | Display your bookmarks.              |
| =b=      | =eww-add-bookmark=   | Add the current page as a bookmark.  |
| =l=      | =eww-back-url=       | Go to the previously displayed page. |
| =r=      | =eww-forward-url=    | Go to the next displayed page.       |
| =g=      | =eww-reload=         | Reload the current page.             |
| =G=      | =eww=                | Go to a new address.                 |
| =H=      | =eww-list-histories= | Shows a list of your histories.      |
| =TAB=    | =shr-next-link=      | Skip to the next link.               |

*** Useful Commands
:PROPERTIES:
:CUSTOM_ID: useful-commands
:END:
| Command                  | Description                                                   |
|--------------------------+---------------------------------------------------------------|
| =keep-lines=             | Delete all lines not matching the provided regex.             |
| =flush-lines=            | Delete all lines matching the provided regex.                 |
| =sort-lines=             | Sort lines in region alphabetically.                          |
| =delete-duplicate-lines= | Delete all but one copy of any identical lines in the region. |
| =ff-find-other-file=     | Find the header or source file corresponding to this file.    |
** Vim Proficiency :terminal:minimal:keybindings:cheatsheet:vim:
:PROPERTIES:
:EXPORT_FILE_NAME: vim-cheats
:EXPORT_DATE: 2023-04-05
:EXPORT_HUGO_DRAFT: false
:END:

Although I don't use vim, it has good points for being easy *keyboard glue*. Why not learn both of the best worlds of Editors?

Apart from normal vim navigations and operators, These are some of the unique vim magics, which I haven't used at all.

*** Marks
:PROPERTIES:
:CUSTOM_ID: marks
:END:

This is the important one, I have not used this at all. Should try and make use of it. Although emacs ~mark-ring~ is alot better.

| Shortcut    | Description                                          |
|-------------+------------------------------------------------------|
| =`^=        | Last position of cursor in insert mode               |
| =`.=        | Last change in current buffer                        |
| =`"=        | Last exited current buffer                           |
| =`0=        | In last file edited                                  |
| =''=        | Back to line in current buffer where jumped from     |
| =``=        | Back to position in current buffer where jumped from |
| =`[=        | To beginning of previously changed or yanked text    |
| =`]=        | To end of previously changed or yanked text          |
| =`<=        | To beginning of last visual selection                |
| =`>=        | To end of last visual selection                      |
| =ma=        | Mark this cursor position as =a=                     |
| =`a=        | Jump to the cursor position =a=                      |
| ='a=        | Jump to the beginning of the line with position =a=  |
| =d'a=       | Delete from current line to line of mark =a=         |
| =d`a=       | Delete from current position to position of mark =a= |
| =c'a=       | Change text from current line to line of =a=         |
| =y`a=       | Yank text from current position to position of =a=   |
| =:marks=    | List all current marks                               |
| =:delm a=   | Delete mark =a=                                      |
| =:delm a-d= | Delete marks =a=, =b=, =c=, =d=                      |
| =:delm abc= | Delete marks =a=, =b=, =c=                           |

--------

*** Navigation
:PROPERTIES:
:CUSTOM_ID: navigation
:END:
| Shortcut       | Description                |
|----------------+----------------------------|
| =%=            | Nearest/matching ={[()]}=  |
| =[(= =[{= =[<= | Previous =(= or ={= or =<= |
| =])=           | Next                       |
| =[m=           | Previous method start      |
| =[M=           | Previous method end        |

--------

*** Jumping
:PROPERTIES:
:CUSTOM_ID: jumping
:END:
| Shortcut | Description                  |
|----------+------------------------------|
| =<C-O>=  | Go back to previous location |
| =<C-I>=  | Go forward                   |
| =gf=     | Go to file in cursor         |

--------

*** Counters
:PROPERTIES:
:CUSTOM_ID: counters
:END:
| Shortcut | Description      |
|----------+------------------|
| =<C-A>=  | Increment number |
| =<C-X>=  | Decrement        |

--------

*** Tags
:PROPERTIES:
:CUSTOM_ID: tags
:END:
| Shortcut             | Description                                     |
|----------------------+-------------------------------------------------|
| =:tag Classname=     | Jump to first definition of Classname           |
| =<C-]>=              | Jump to definition                              |
| =g]=                 | See all definitions                             |
| =<C-T>=              | Go back to last tag                             |
| =<C-O> <C-I>=        | Back/forward                                    |
| =:tselect Classname= | Find definitions of Classname                   |
| =:tjump Classname=   | Find definitions of Classname (auto-select 1st) |

--------

*** Folds
:PROPERTIES:
:CUSTOM_ID: folds
:END:
| Shortcut      | Description                  |
|---------------+------------------------------|
| =zo= /// =zO= | Open                         |
| =zc= /// =zC= | Close                        |
| =za= /// =zA= | Toggle                       |
| =zv=          | Open folds for this line     |
| =zM=          | Close all                    |
| =zR=          | Open all                     |
| =zm=          | Fold more /(foldlevel += 1)/ |
| =zr=          | Fold less /(foldlevel -= 1)/ |
| =zx=          | Update folds                 |

--------

*** Command line
:PROPERTIES:
:CUSTOM_ID: command-line
:END:
| Shortcut     | Description                               |
|--------------+-------------------------------------------|
| =<C-R><C-W>= | Insert current word into the command line |
| =<C-R>"=     | Paste from ‚Äù register                     |
| =<C-X><C-F>= | Auto-completion of path in insert mode    |

--------

*** Spell checking
:PROPERTIES:
:CUSTOM_ID: spell-checking
:END:
| Shortcut                     | Description                                            |
|------------------------------+--------------------------------------------------------|
| =:set spell spelllang=en_us= | Turn on US English spell checking                      |
| =]s=                         | Move to next misspelled word after the cursor          |
| =[s=                         | Move to previous misspelled word before the cursor     |
| =z==                         | Suggest spellings for the word under/after the cursor  |
| =zg=                         | Add word to spell list                                 |
| =zw=                         | Mark word as bad/mispelling                            |
| =zu= / =C-X (Insert Mode)=   | Suggest words for bad word under cursor from spellfile |

See =:help spell=

--------

Source of this cheatsheet : [[https://devhints.io/vim]]

With that noted, I hope you turn out to be a proficient /*Vimmer*/ or an efficient /*Emacser*/

For emacs, I have my previous post for it.
** Linux : The Matrix :terminal:cheatsheet:minimal:
:PROPERTIES:
:EXPORT_FILE_NAME: linux-cheatsheet
:EXPORT_DATE: 2023-04-12
:EXPORT_HUGO_DRAFT: false
:END:

There are tons of linux command line cheatsheet or guides.

Here are some of the best reads, I suggest you to go throught each of it, *It's a gem*.


+ [[https://github.com/jlevy/the-art-of-command-line][The Art of Command Line]] ‚Äî notes and tips on using the command-line, suitable for both beginners and experienced users.
+ [[https://www.commandlinefu.com/commands/browse/sort-by-votes][commandlinefu]] ‚Äî command-line gems, includes a handy search feature.
+ [[https://github.com/tldr-pages/tldr][tldr]] ‚Äî collection of community-maintained help pages for command-line tools.
+ [[https://explainshell.com/][explainshell]] ‚Äî write down a command-line to see the help text that matches each argument.
+ [[http://www.compciv.org/unix-tools/][General purpose command-line tools]] ‚Äî examples for most common usecases.
+ [[https://devmanual.gentoo.org/tools-reference/bash/index.html][Bash reference cheatsheet]] ‚Äî nicely formatted and explained well.
+ [[https://devhints.io/bash][Bash scripting cheatsheet]] ‚Äî quick reference to getting started with Bash scripting.

--------------

#+begin_center
*With that ~coded~, I hope you enjoy the terminal. Unleash the Matrix*.
#+end_center
