<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<author><name>Dilip</name></author>
<title>Dilip Logs</title>
<description>Dilip's blog posts and snippets</description>
<generator>Emacs webfeeder.el</generator>
<link>https://idlip.github.io</link>
<atom:link href="https://idlip.github.io/rss.xml" rel="self" type="application/rss+xml"/>
<lastBuildDate>Sun, 04 Feb 2024 12:54:05 +0000</lastBuildDate>
<item>
  <title>Art of Getting things Done</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-orgbf75b07" class="outline-2">
 <h2 id="orgbf75b07">GTD</h2>
 <div class="outline-text-2" id="text-orgbf75b07">
 <p>
The tendency to organize things, and get the workflow in right track is a natural process, and we insist more on that in today’s world. The mere idea of finding the “right way”, “Best way possible” is a driving opinion for various Internet opinions. People do share what works for them, and they argue.
</p>

 <p>
The ultimate deal I found is, a system does not have to help you, the natural process has to help you in getting things done.
</p>

 <p>
Nowadays, the system has become a hindrance in workflow, like those popular apps trying to do that thing for you.
</p>

 <p>
Usually to most of the person, GTD is not organized, it just goes hand in hand like a chain and workflow is mapped into our brain.
Sure digital ecosystem has occupied and developed into a “Second brain” for us, but that should be too much work for  <b>first brain</b> to train  <span class="underline">second brain</span> to work perfectly for a system.
</p>

 <p>
Just let go of the plans, just focus on what things to do for now. Slowly and gradually let your own system evolve that works perfectly for you, and there is no need to let the world know or judge about our system.
</p>

 <p>
This snippet was addressed on the latest trends, and my long readings on articles and blogs over  <b>Zettelkasten</b>,  <b>Getting Things Done</b>,  <b>Personal Knowledge Management</b> &  <b>Note-Taking</b>.
</p>

 <p>
This would be a never ending story, and ultimately I just sat with defaults without much over thinking the system or best practice. Just go with  <b>Org mode</b>, plain text file with headings defined to make sense, add  <code>TODO</code> for necessary tasks, and over a month, make changes if required to make it feasible and handy for next month. This worked great, I don’t need complexity or automation for me to see at redundant information on my notes.
</p>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/snippets/./art-gtd.html</link>
  <guid isPermaLink="false">https://idlip.github.io/snippets/./art-gtd.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Ken quotes</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org0a44adf" class="outline-2">
 <h2 id="org0a44adf">Beyond Ken    <span class="tag"> <span class="quotes">quotes</span>  <span class="snippets">snippets</span></span></h2>
 <div class="outline-text-2" id="text-org0a44adf">
 <p>
Welcome to some more snippet of Quotes.
Lately I have been busy, kinda dusting off my table.  <i>Ooof.. procastination!</i>
</p>

 <p>
Some more laughs, some more values!
</p>
 <hr></hr> <ul class="org-ul"> <li> <p>
Napoleon Bonaparte
</p>

 <blockquote>
 <p>
If you want a thing done well, do it yourself.
</p>
</blockquote></li>

 <li> <p>
Henny Youngman
</p>

 <blockquote>
 <p>
I once wanted to become an atheist, but I gave up - they have no holidays.
</p>
</blockquote></li>

 <li> <p>
Lillian Hellman
</p>

 <blockquote>
 <p>
Things start out as hopes and end up as habits.
</p>
</blockquote></li>

 <li> <p>
Dorothy Parker
</p>

 <blockquote>
 <p>
The cure for boredom is curiosity. There is no cure for curiosity.
</p>
</blockquote></li>

 <li> <p>
Randy K. Milholland
</p>

 <blockquote>
 <p>
Lies are like children. If you don’t nurture them, they’ll never be useful later.
</p>
</blockquote></li>

 <li> <p>
Ralph W. Sockman
</p>

 <blockquote>
 <p>
The test of courage comes when we are in the minority. The test of tolerance comes when we are in
 the majority.
</p>
</blockquote></li>

 <li> <p>
Ethel Waters
</p>

 <blockquote>
 <p>
We are all gifted. That is our inheritance.
</p>
</blockquote></li>

 <li> <p>
Tom Brokaw
</p>

 <blockquote>
 <p>
It’s easy to make a buck. It’s a lot tougher to make a difference.“
</p>
</blockquote></li>

 <li> <p>
Sonya Parker
</p>

 <blockquote>
 <p>
Live your life for you not for anyone else. Don’t let the fear of being judged, rejected or
 disliked stop you from being yourself.
</p>
</blockquote></li>

 <li> <p>
Wayne Dyer
</p>

 <blockquote>
 <p>
If you believe it will work out, you’ll see opportunities. If you believe it won’t, you will see
 obstacles.
</p>
</blockquote></li>

 <li> <p>
Anime
</p>

 <blockquote>
 <p>
The strongest hearts have the most scars.
</p>
</blockquote></li>
</ul> <hr></hr> <div class="org-center">
 <p>
Hopefully with those melifluous thoughts, I hope you are alright ;)
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/snippets/./beyond-ken.html</link>
  <guid isPermaLink="false">https://idlip.github.io/snippets/./beyond-ken.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Cognizance</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org2639ff7" class="outline-2">
 <h2 id="org2639ff7">Cognizance    <span class="tag"> <span class="snippets">snippets</span>  <span class="quotes">quotes</span></span></h2>
 <div class="outline-text-2" id="text-org2639ff7">
 <p>
Welcome to next snippet of Quotes.
</p>

 <p>
Hope so, it is advising enough to make your day well ;)
</p>

 <hr></hr> <ul class="org-ul"> <li>Psychology Reads</li>
</ul> <blockquote>
 <p>
People Aren’t Better Lie Detectors (50-60%) in More Realistic Settings
</p>
</blockquote>

 <blockquote>
 <p>
Nothing in life is as important as you think it is, while you are thinking about it
</p>
</blockquote>

 <ul class="org-ul"> <li> <p>
Herm Albright
</p>

 <blockquote>
 <p>
A positive attitude may not solve all your problems, but it will annoy enough people to make it worth the effort.
</p>
</blockquote></li>

 <li> <p>
Bret Harte
</p>

 <blockquote>
 <p>
The only sure thing about luck is that it will change.
</p>
</blockquote></li>

 <li> <p>
Philip G. Hammerton
</p>

 <blockquote>
 <p>
Have you ever observed that we pay much more attention to a wise passage when it is quoted than when we read it in the original author?
</p>
</blockquote></li>

 <li> <p>
Woodrow Wilson
</p>

 <blockquote>
 <p>
The man who is swimming against the stream knows the strength of it.
</p>
</blockquote></li>
</ul> <hr></hr> <div class="org-center">
 <p>
With these sweet little pies, I hope it does make your day alive ;)
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/snippets/./cognizance.html</link>
  <guid isPermaLink="false">https://idlip.github.io/snippets/./cognizance.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Emacs is OP!</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org48d939b" class="outline-2">
 <h2 id="org48d939b">The greatest Editor    <span class="tag"> <span class="snippets">snippets</span>  <span class="editors">editors</span>  <span class="emacs">emacs</span>  <span class="neovim">neovim</span></span></h2>
 <div class="outline-text-2" id="text-org48d939b">
 <p>
Before anyone shouts vim, let me  <code>:q!</code>
I was a vimmer for a year, I played and had a good basic config. Even after an year, I didn’t grasp the full potential of vim, it was just handy to use  <code>hjkl</code> to move around.
</p>

 <p>
But When I’m learning Emacs, the experience is immense, it defines how things are meant and the legacy of Emacs for 40 years, is not a joke.
</p>

 <p>
I cannot just rant to make people ditch vim for Emacs, But once you understand you will realize, that is why people went and made  <code>evil</code> mode to emulate Vi layer (vim 100%).
</p>

 <p>
Now they get the  <b>Best</b> of both the World!
</p>

 <p>
Nonetheless, Emacs is the  <b>GOAT</b> !
</p>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/snippets/./emacs-op.html</link>
  <guid isPermaLink="false">https://idlip.github.io/snippets/./emacs-op.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Init on Snippets</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-orgac41e00" class="outline-2">
 <h2 id="orgac41e00">Journey Begins    <span class="tag"> <span class="log">log</span>  <span class="snippets">snippets</span>  <span class="first">first</span></span></h2>
 <div class="outline-text-2" id="text-orgac41e00">
 <p>
I have almost set my first static website.
From here my creativity goes public to the world.
</p>

 <p>
Its just a small thing, but my passion thanks me for this.
</p>

 <p>
Its time.. time to begin the chapter!
</p>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/snippets/./init.html</link>
  <guid isPermaLink="false">https://idlip.github.io/snippets/./init.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Insightful Quotes</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org6bb13fa" class="outline-2">
 <h2 id="org6bb13fa">Insightful Quotes    <span class="tag"> <span class="snippets">snippets</span>  <span class="quotes">quotes</span></span></h2>
 <div class="outline-text-2" id="text-org6bb13fa">
 <p>
I will be making few snippets on few quotes which impressed me or made me laugh for the day!
</p>

 <p>
Hope so, it is insightful enough for you also.
</p>

 <hr></hr> <ul class="org-ul"> <li> <p>
Self quote
</p>

 <blockquote>
 <p>
Don’t just read, Think - Research and Understand!
</p>
</blockquote></li>

 <li> <p>
Walt Kelly
</p>

 <blockquote>
 <p>
Every burden is a blessing.
</p>
</blockquote></li>

 <li> <p>
Gustave Flaubert
</p>

 <blockquote>
 <p>
The art of writing is the art of discovering what you believe.
</p>
</blockquote></li>

 <li> <p>
Samuel Butlet
</p>

 <blockquote>
 <p>
Let us be grateful to the mirror for revealing to us our appearance only.
</p>
</blockquote></li>

 <li> <p>
Joseph Cossman
</p>

 <blockquote>
 <p>
Obstacles are things a person sees when he takes his eyes off his goal.
</p>
</blockquote></li>

 <li> <p>
Henny Youngman
</p>

 <blockquote>
 <p>
I told the doctor I broke my leg in two places. He told me to quit going to those places.
</p>
</blockquote></li>

 <li> <p>
Barabara Tober
</p>

 <blockquote>
 <p>
Traditions are group efforts to keep the unexpected from happening.
</p>
</blockquote></li>

 <li> <p>
Frank Wilczek
</p>

 <blockquote>
 <p>
In physics, you don’t have to go around making trouble for yourself - nature does it for you.
</p>
</blockquote></li>

 <li> <p>
David Coblitz
</p>

 <blockquote>
 <p>
A committee can make a decision that is dumber than any of its members.
</p>
</blockquote></li>
</ul> <hr></hr> <div class="org-center">
 <p>
With that  <b>“quoted”</b>, I hope you have a great day!
</p>

 <p>
Visit the snippets again!
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/snippets/./insightful-quotes.html</link>
  <guid isPermaLink="false">https://idlip.github.io/snippets/./insightful-quotes.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Organize File</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org4554f3f" class="outline-2">
 <h2 id="org4554f3f">Organize File    <span class="tag"> <span class="snippets">snippets</span>  <span class="orgmode">orgmode</span></span></h2>
 <div class="outline-text-2" id="text-org4554f3f">
 <p>
From past few days I have been dabbling in the dimension of how to organize files, notes in effective manner. After jumping deep into the rabbit hole, I went on a spree of digesting several blog posts, articles on maintaining files, organizing notes, getting things done, what not, the list goes on.
</p>

 <p>
With power of  <b>org-mode</b> comes the doubt, is it efficient to maintain one big org file or multiple small files. Yes, its personal preference based on users need, there is no set guided rules.
</p>

 <p>
I stumbled across  <code>Zettelkasten</code> system which wasn’t new, I was aware of it in the likes of  <code>org-roam</code>, although I believe I did not have much matter to use it to some potential to form sensible network. So for now, no hard plans of multiple small files.
</p>

 <p>
After many reading, especially Karl voit’s posts ( <a href="https://karl-voit.at">site</a>), I was kinda convinced that file system hierarchy does not make sense, as the file system model I have may change over time, and I would not like to remember and know where I placed something and where to place something. The schema of Zettelkasten is also against this, like you maintain small files and just connect them based on UniqueID or with complexity of SQL database. The simpler alternative would be  <code>denote</code> emacs package, then too I don’t see the light on using it to the potential. I liked denote way of naming files, and it is format agnostic, does not depend on anything. Just pure elisp to do the job.
</p>

 <p>
Thus as a safer approach, I renamed some notes files to denote convention (as there is no harm/changes in that).
</p>

 <p>
Ultimately the fruit to yield is, just go with whatever is easy and that gets the work done. Forgetting people’s upfront images, looking at other side proved me that nobody is well organized in every way. Everybody lacks something in one or the other way, like I saw person who maintained file system well organized, but the desk and the room was gross and jam packed. So it depends, but the key takeaway is, if it just works; That’s enough. But as time goes, changes and upgrades are required.
</p>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/snippets/./organize-file.html</link>
  <guid isPermaLink="false">https://idlip.github.io/snippets/./organize-file.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Rss: the Internet</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org37550bf" class="outline-2">
 <h2 id="org37550bf">RSS: The better Internet    <span class="tag"> <span class="snippets">snippets</span>  <span class="news">news</span>  <span class="internet">internet</span>  <span class="read">read</span>  <span class="rss">rss</span></span></h2>
 <div class="outline-text-2" id="text-org37550bf">
</div>
 <div id="outline-container-orgfafb07f" class="outline-3">
 <h3 id="orgfafb07f">Cheesy Internet</h3>
 <div class="outline-text-3" id="text-orgfafb07f">
 <p>
I don’t have to say this, the Internet is hella bloated.. Junks are everywhere, nobody knows that they read shit, they are watching shits whole time.
</p>

 <p>
Just do a test, How many popups have you closed today, How many cookies (web) have you eaten, How many captchas did you solve, How many minutes did you wait to skip an ad just to watch a video… Even worse, ads sponsors are embedded within a video (So cruel and harsh world)
 <i>It goes on</i>.
</p>

 <p>
Internet and digital software’s are getting so much bloated, people (normies) have forgotten Unix or say ’minimalism’. People are upgrading RAM like anything, 8GB ain’t enough it-seems for them. Here, I do everything with just 4GB RAM.
People these days all need ready-made/ready-to-work  stuffs, I wonder how do they even watch DIY channels on YouTube.
</p>
</div>
</div>

 <div id="outline-container-org9366ae5" class="outline-3">
 <h3 id="org9366ae5">The Hero</h3>
 <div class="outline-text-3" id="text-org9366ae5">
 <p>
Rss stands for  <b>Really Simple Syndication</b>, It is a classic on consuming web as supposedly it was built for. Today its all crappy  <b>JavaScript</b> (a big bloat of cheese).
</p>

 <p>
People literally have forgotten to read and embrace the text, everyone wants; YouTube tutorials, or some designed way to make them understand.
Shit, its a no joke, that’s why AI have evolved these days.
Make our life easy?  Lol
</p>

 <p>
It can easily fetch content from web and easily showcase the actual content only. If that content is valuable, we should value our way to taking it.
</p>

 <p>
Actually many of you might know famous news reader called  <b>Feedly</b>, it is based on Rss system under-the-hood.
</p>
</div>

 <div id="outline-container-orgf5b022d" class="outline-4">
 <h4 id="orgf5b022d">Feed Readers</h4>
 <div class="outline-text-4" id="text-orgf5b022d">
 <p>
If you use window there are famous readers like fluent reader.
On Linux you get  <a href="https://newsboat.org/">newsboat</a> (terminal lovers), I use  <a href="https://github.com/skeeto/elfeed">elfeed</a> (Emacs way).
</p>

 <p>
For GUI Linux user you get : (Install with your system’s package manager or use AppImage/Flathub)
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/lwindolf/liferea/">Liferea</a></li>
 <li> <a href="https://github.com/yang991178/fluent-reader">Fluent-reader</a></li>
 <li> <a href="https://www.thunderbird.net/en-US">Thunderbird</a> (Email client + Rss)</li>
 <li> <a href="https://gitlab.com/news-flash/news_flash_gtk">NewsFlash</a></li>
 <li> <a href="https://apps.kde.org/en/akregator">Kde’s Akregator</a></li>
</ul> <p>
Watching YouTube contents is whole lot better in Mpv with sponsorblock (It gives seamless content joy)
</p>


 <p>
Actually elfeed integrates so well with Emacs, I don’t have to learn new stuffs for another application or keyboard shortcuts.
</p>

 <p>
That’s one of the reason I call  <b>Emacs as the GOAT-E (Editor)</b>.
</p>

 <p>
I will try to expand more bits on rss feeds value by making a detailed post.
</p>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/snippets/./rss-better.html</link>
  <guid isPermaLink="false">https://idlip.github.io/snippets/./rss-better.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Tools</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org0be3abb" class="outline-2">
 <h2 id="org0be3abb">Tools that are Best!    <span class="tag"> <span class="terminal">terminal</span>  <span class="cli">cli</span>  <span class="linux">linux</span>  <span class="minimal">minimal</span>  <span class="tools">tools</span></span></h2>
 <div class="outline-text-2" id="text-org0be3abb">
</div>
 <div id="outline-container-org4009dc9" class="outline-3">
 <h3 id="org4009dc9">Utilities that are Best! 🌟</h3>
 <div class="outline-text-3" id="text-org4009dc9">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Class</th>
 <th scope="col" class="org-left">Name</th>
</tr></thead> <tbody> <tr> <td class="org-left">Window Manager</td>
 <td class="org-left"> <a href="https://hyprland.org/">Hyprland</a> 🌸</td>
</tr> <tr> <td class="org-left">Text Editor</td>
 <td class="org-left"> <a href="https://www.gnu.org/software/emacs/">Emacs</a> 💮</td>
</tr> <tr> <td class="org-left">Gtk Theme</td>
 <td class="org-left"> <a href="https://github.com/Fausto-Korpsvart/Gruvbox-GTK-Theme">Gruvbox</a> /  <a href="https://github.com/vinceliuice/Orchis-theme">Orchis</a> 🎨</td>
</tr> <tr> <td class="org-left">Font</td>
 <td class="org-left"> <a href="https://tosche.net/fonts/comic-code">Comic Code</a> /  <a href="https://github.com/dtinth/comic-mono-font">Comic Mono</a> /  <a href="https://github.com/tonsky/FiraCode">Fira Code</a></td>
</tr> <tr> <td class="org-left">Pdf Reader</td>
 <td class="org-left"> <a href="https://github.com/ahrm/sioyek">Sioyek</a> 📔 (ditch zathura)</td>
</tr> <tr> <td class="org-left">Media Player</td>
 <td class="org-left"> <a href="https://mpv.io">MPV!</a> 🎬 (its MVP too)</td>
</tr> <tr> <td class="org-left">Image Viewer</td>
 <td class="org-left"> <a href="https://sr.ht/~exec64/imv/">Imv</a> 🖼️</td>
</tr> <tr> <td class="org-left">RSS Reader</td>
 <td class="org-left"> <a href="https://github.com/skeeto/elfeed">Elfeed</a> 📰 (Again, Emacs)</td>
</tr> <tr> <td class="org-left">Music Player</td>
 <td class="org-left"> <a href="https://github.com/ncmpcpp/ncmpcpp">Ncmpcpp</a> or  <a href="https://github.com//mingus">Mingus in Emacs</a> 🎶</td>
</tr> <tr> <td class="org-left">Terminal</td>
 <td class="org-left"> <a href="https://codeberg.org/dnkl/foot">Foot</a> via footclient ⚽</td>
</tr> <tr> <td class="org-left">Menu/Launcher</td>
 <td class="org-left"> <a href="https://github.com/davatorium/rofi">Rofi</a> 🚀</td>
</tr> <tr> <td class="org-left">Notification</td>
 <td class="org-left"> <a href="https://github.com/dunst/dunst">Dunst</a>  🛎️</td>
</tr> <tr> <td class="org-left">Shell</td>
 <td class="org-left"> <a href="https://zsh.org">Zshell</a> with  <a href="https://starship.rs">Starship</a> 🔰</td>
</tr> <tr> <td class="org-left">Status Bar</td>
 <td class="org-left"> <a href="https://github.com/Alexays/Waybar">Waybar</a>  🍥</td>
</tr> <tr> <td class="org-left">Favourite Color-Schemes</td>
 <td class="org-left">Modus-Vivendi + Gruvbox</td>
</tr></tbody></table> <blockquote>
 <p>
Rest all other stuffs I do in Emacs, tbh I could do everything in Emacs lol.
</p>
</blockquote>


 <p>
Feel free to comment down and ask me doubts or about some improvements, you wanna inform! I will be glad.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./best-tool.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./best-tool.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Emacs on Droid</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org4299ce3" class="outline-2">
 <h2 id="org4299ce3">M-x Anything</h2>
 <div class="outline-text-2" id="text-org4299ce3">
 <p>
Emacs is a definite Greatest editor of all time, the extensibility power is unmatched with any other software. Users of Emacs can only know what it is, one who has not used it may not really understand the principles and power it gives us, the users.
</p>

 <p>
Once settled with it on PC, its not late to think of something similar for our handy pocket phones, at least support for  <b>org-mode</b> so we organize our life. The research leads us to find apps, and its unfortunate that market has lots of apps supporting markdown, just for its markup. Even org-mode is good for markup only, Karl voit’s  <a href="https://karl-voit.at/2017/09/23/orgmode-as-markup-only/">post</a> explains it very well.
</p>

 <p>
Finally we have some apps for org-mode, namely on Android  <a href="https://github.com/orgzly/orgzly-android">Orgzly</a> (maintained:  <a href="https://github.com/orgzly-revived/orgzly-android-revived">orgzly-revived</a>), Orgro (read-only app) and there is  <a href="https://organice.200ok.ch/">Organice</a> (PWA site, unique, supports desktop).
Surprisingly IOS has many apps for org-mode, namely  <a href="https://beorgapp.com/">beorg</a> and  <a href="https://plainorg.com/">plain org</a> (I dont use IOS, so please search app store).
</p>

 <p>
New project under development  <a href="https://github.com/Artawower/orgnote-client">OrgNote</a> also looks promising.
</p>

 <p>
But it was near February, 2023, that Po Lu, one of the Emacs developer, started and released support for touch-screen devices (including Android) and to our surprise it was  <b>the graphical Emacs</b>, available now on Android. But before trying the first doubts and cons expected was that it does not work well with virtual keyboard, so only good option is to carry physical keyboard everywhere?
That could be solved by getting adjusted to keyboard app called “Hackers Keyboard” (TODO link).
</p>

 <p>
But as I dug deep, the developer Po Lu, was on telegram channel in disguise, as I pointed that emacs android needed android’s share feature (like open-with) to other people, he had seen it and implemented is very quickly. It shows how much of an interesting take-up it is.
</p>

 <p>
Orgzly actually satisfied org-mode and agenda things with help of syncthing over org directory. But the next bummer came when I fell in love with  <a href="https://github.com/skeeto/elfeed">Elfeed</a> (RSS reader) and badly wanted to read feeds in sync with my phone. Since Emacs officially made its way for Android, so why not open some doors, indeed it did gave the power of emacs-lisp!
</p>

 <p>
Initially I started with bare-bone config, and later tried to incorporate my PC config with android, and it was easy, without much hassle. Just had to define a constant to check if system is on Linux or Android, and use the keyword in condition statements and  <code>use-package</code>. Next thought would be to use Unix tools/commands, so it only leads to Termux, and after few days, the developer released Termux signed apk to use in conjunction with emacs, so as to leverage the command line utilities in Android emacs too, namely  <code>ripgrep</code>,  <code>git</code>. I have not tried  <code>image-magick</code>,  <code>mupdf</code> for  <code>pdf-tools</code>. But frankly  <a href="https://github.com/foobnix/LibreraReader">Librera reader</a> is good enough.
</p>

 <p>
Here is a  <a href="https://marek-g.github.io/posts/tips_and_tricks/emacs_on_android/">blog post</a> by marek-g explaining how termux is modified to use with Emacs
</p>

 <p>
Note: Fdroid emacs apk lacks some support like GnuTLS (so won’t be able to install package or use eww), thus the only source to get emacs builds for Android is  <a href="https://sourceforge.net/projects/android-ports-for-gnu-emacs">https://sourceforge.net/projects/android-ports-for-gnu-emacs</a>
</p>

 <p>
For anyone trying it out again or newly, please make sure you go through  <code>C-h R android</code> or  <code>C-h r m android</code> for frequent issues or things to know for Android build. For any queries to me, please feel free to open up an issue over this  <a href="https://github.com/idlip/d-nix">repo</a>.
</p>

 <p>
Overall with setting only few variables for android specifically, I replicated almost same emacs config on Android. The definite org-mode reader, read Elfeed feeds in sync with PC, whatever emacs packages you use.
</p>

 <p>
Config just for android exclusively:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span class="org-comment-delimiter">;; </span> <span class="org-comment">define constant to check if system is android</span>
( <span class="org-keyword">defconst</span>  <span class="org-variable-name">d/on-droid</span> (eq system-type 'android))
 <span class="org-comment-delimiter">;; </span> <span class="org-comment">if system is android, executes following code</span>
( <span class="org-keyword">when</span> d/on-droid
  (custom-set-variables
   '(touch-screen-precision-scroll t)  <span class="org-comment-delimiter">;; </span> <span class="org-comment">smooth scrolling</span>
   '(touch-screen-display-keyboard t)
    <span class="org-comment-delimiter">;; </span> <span class="org-comment">^ display virtual keyboard when touch on phone screen</span>
    <span class="org-comment-delimiter">;; </span> <span class="org-comment">does not work on read-only buffer (dashboard, startup..)</span>
   '(browse-url-android-share t))
   <span class="org-comment-delimiter">;; </span> <span class="org-comment">open links/urls with android's open-with or share kinda popup</span>

  ( <span class="org-keyword">defun</span>  <span class="org-function-name">d/key-droid</span>()
     <span class="org-doc">"To enable touch screen keyboard"</span>
    ( <span class="org-keyword">interactive</span>)
    (frame-toggle-on-screen-keyboard (selected-frame) nil)
    )
  )
</pre>
</div>

 <p>
I’m not sure how suitable it is for coding environment (with lsp and complexities), but it behaves as expected for reading purpose and for quick note taking. I should probably say, it excels in that segment.
</p>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./emacs-droid.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./emacs-droid.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Emacs Efficiency</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org7841dcb" class="outline-2">
 <h2 id="org7841dcb">Discover Emacs    <span class="tag"> <span class="cheatsheet">cheatsheet</span>  <span class="keybindings">keybindings</span>  <span class="emacs">emacs</span></span></h2>
 <div class="outline-text-2" id="text-org7841dcb">
 <p>
This is straight away from  <a href="https://github.com/VernonGrant/discovering-emacs">VernonGrant</a> who hosts a podcast for Emacs called “ <a href="https://www.discovering-emacs.com/">Discovering-Emacs</a>”.
It’s a great and has very much professional vibes, the explanations are Crisp and Clear!
I suggest you to check out, he even has made  <a href="https://www.youtube.com/@discoveringemacs">YouTube channel</a> for it.
</p>

 <p>
I have removed some of the common bindings from this table, I have retained some unique one’s which isn’t discovered generally. I guess that is why the name is made (lol)
</p>

 <p>
I just wanted to have a cheatsheet for it, so I decided to leave it as a post here.
</p>

 <p>
You can checkout the source here ⟾  <a href="https://github.com/VernonGrant/emacs-keyboard-shortcuts">https://github.com/VernonGrant/emacs-keyboard-shortcuts</a>
</p>
</div>

 <div id="outline-container-org78d59b4" class="outline-3">
 <h3 id="org78d59b4">General Shortcuts</h3>
 <div class="outline-text-3" id="text-org78d59b4">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>C-x Esc Esc</code></td>
 <td class="org-left"> <code>repeat-complex-command</code></td>
 <td class="org-left">Edit and re-evaluate last complex command.</td>
</tr> <tr> <td class="org-left"> <code>C-h f</code></td>
 <td class="org-left"> <code>describe-function</code></td>
 <td class="org-left">Help information for a function.</td>
</tr> <tr> <td class="org-left"> <code>C-h x</code></td>
 <td class="org-left"> <code>describe-command</code></td>
 <td class="org-left">Help information for a command (a function available using  <code>M-x</code>).</td>
</tr> <tr> <td class="org-left"> <code>C-h l</code></td>
 <td class="org-left"> <code>view-lossage</code></td>
 <td class="org-left">Show log for key presses and commands.</td>
</tr> <tr> <td class="org-left"> <code>M--</code></td>
 <td class="org-left"> <code>negative-argument</code></td>
 <td class="org-left">Prefix to perform negative meta commands.</td>
</tr> <tr> <td class="org-left"> <code>C--</code></td>
 <td class="org-left"> <code>negative-argument</code></td>
 <td class="org-left">Prefix to perform negative commands.</td>
</tr> <tr> <td class="org-left"> <code>M-l</code></td>
 <td class="org-left"> <code>downcase-word</code></td>
 <td class="org-left">Lowercase word forward.</td>
</tr> <tr> <td class="org-left"> <code>M-c</code></td>
 <td class="org-left"> <code>capitalize-word</code></td>
 <td class="org-left">Capitalize word forward.</td>
</tr> <tr> <td class="org-left"> <code>M-u</code></td>
 <td class="org-left"> <code>upcase-word</code></td>
 <td class="org-left">Uppercase word forward.</td>
</tr> <tr> <td class="org-left"> <code>C-<space> C-<space></code></td>
 <td class="org-left"> <code>set-mark-command</code></td>
 <td class="org-left">Add mark to mark ring.</td>
</tr> <tr> <td class="org-left"> <code>C-u C-<space></code></td>
 <td class="org-left"> <code>set-mark-command</code></td>
 <td class="org-left">Jump to previous mark.</td>
</tr> <tr> <td class="org-left"> <code>M-q</code></td>
 <td class="org-left"> <code>fill-paragraph</code></td>
 <td class="org-left">Wrap/reformat to fill column.</td>
</tr> <tr> <td class="org-left"> <code>M-^</code></td>
 <td class="org-left"> <code>delete-indentation</code></td>
 <td class="org-left">Join previous line.</td>
</tr> <tr> <td class="org-left"> <code>M-- M-^</code></td>
 <td class="org-left"> <code>delete-indentation</code></td>
 <td class="org-left">Join following line.</td>
</tr> <tr> <td class="org-left"> <code>M-{</code></td>
 <td class="org-left"> <code>backward-paragraph</code></td>
 <td class="org-left">Previous paragraph.</td>
</tr> <tr> <td class="org-left"> <code>M-}</code></td>
 <td class="org-left"> <code>forward-paragraph</code></td>
 <td class="org-left">Next paragraph.</td>
</tr> <tr> <td class="org-left"> <code>C-x C-v</code></td>
 <td class="org-left"> <code>find-alternate-file</code></td>
 <td class="org-left">Find alternative file.</td>
</tr> <tr> <td class="org-left"> <code>C-x i</code></td>
 <td class="org-left"> <code>insert-file</code></td>
 <td class="org-left">Insert file contents into the current file.</td>
</tr> <tr> <td class="org-left"> <code>C-x h</code></td>
 <td class="org-left"> <code>mark-whole-buffer</code></td>
 <td class="org-left">Highlight entire buffer.</td>
</tr> <tr> <td class="org-left"> <code>C-M-\</code></td>
 <td class="org-left"> <code>indent-region</code></td>
 <td class="org-left">Re-indent code region in region or from previous mark point.</td>
</tr> <tr> <td class="org-left"> <code>C-x C-x</code></td>
 <td class="org-left"> <code>exchange-point-and-mark</code></td>
 <td class="org-left">Put the mark where point is now, and point where the mark is now.</td>
</tr> <tr> <td class="org-left"> <code>C-x C-j</code></td>
 <td class="org-left"> <code>dired-jump</code></td>
 <td class="org-left">Open Dired jump.</td>
</tr> <tr> <td class="org-left"> <code>C-x SPC</code></td>
 <td class="org-left"> <code>rectangle-mark-mode</code></td>
 <td class="org-left">Rectangle edit mode, can use string-insert-rectangle.</td>
</tr> <tr> <td class="org-left"> <code>C-x +</code></td>
 <td class="org-left"> <code>balance-windows</code></td>
 <td class="org-left">Resize all splits to equal sizes.</td>
</tr> <tr> <td class="org-left"> <code>C-x 5 2</code></td>
 <td class="org-left"> <code>make-frame-command</code></td>
 <td class="org-left">Open in new frame.</td>
</tr> <tr> <td class="org-left"> <code>C-x r SPC</code></td>
 <td class="org-left"> <code>point-to-register</code></td>
 <td class="org-left">Point-to-register.</td>
</tr> <tr> <td class="org-left"> <code>C-x r j</code></td>
 <td class="org-left"> <code>jump-to-register</code></td>
 <td class="org-left">Jump-to-register.</td>
</tr> <tr> <td class="org-left"> <code>M-s o</code></td>
 <td class="org-left"> <code>occur</code></td>
 <td class="org-left">List lines using regex.</td>
</tr> <tr> <td class="org-left"> <code>M-s h r</code></td>
 <td class="org-left"> <code>highlight-regexp</code></td>
 <td class="org-left">Highlights regex expression (useful for presentations).</td>
</tr> <tr> <td class="org-left"> <code>M-r</code></td>
 <td class="org-left"> <code>move-to-window-line-top-bottom</code></td>
 <td class="org-left">Move cursor to top, middle and bottom.</td>
</tr> <tr> <td class="org-left"> <code>C-l</code></td>
 <td class="org-left"> <code>recenter-top-bottom</code></td>
 <td class="org-left">Move text in relation to the cursor, to top, middle and bottom.</td>
</tr> <tr> <td class="org-left"> <code>M-!</code></td>
 <td class="org-left"> <code>shell-command</code></td>
 <td class="org-left">Run a shell command.</td>
</tr> <tr> <td class="org-left"> <code>M-&</code></td>
 <td class="org-left"> <code>async-shell-command</code></td>
 <td class="org-left">Async shell command.</td>
</tr> <tr> <td class="org-left"> <code>C-u 0</code></td>
 <td class="org-left"> <code>universal-argument</code></td>
 <td class="org-left">Infinite count prefix.</td>
</tr> <tr> <td class="org-left"> <code>C-u {count}</code></td>
 <td class="org-left"> <code>universal-argument</code></td>
 <td class="org-left">Repeat operation x amount of times.</td>
</tr> <tr> <td class="org-left"> <code>C-x z</code></td>
 <td class="org-left"> <code>repeat</code></td>
 <td class="org-left">Repeat command.</td>
</tr> <tr> <td class="org-left"> <code>C-x backspace</code></td>
 <td class="org-left"> <code>backward-kill-sentence</code></td>
 <td class="org-left">Clear mini-buffer.</td>
</tr> <tr> <td class="org-left"> <code>M-g M-g</code></td>
 <td class="org-left"> <code>goto-line</code></td>
 <td class="org-left">Go to line.</td>
</tr> <tr> <td class="org-left"> <code>C-x 1</code></td>
 <td class="org-left"> <code>delete-other-windows</code></td>
 <td class="org-left">Kill other windows.</td>
</tr> <tr> <td class="org-left"> <code>M-z (char)</code></td>
 <td class="org-left"> <code>zap-to-char</code></td>
 <td class="org-left">Zap up to char.</td>
</tr> <tr> <td class="org-left"> <code>C-x * g</code></td>
 <td class="org-left"> <code>calc-dispatch</code></td>
 <td class="org-left">Eval in new buffer.</td>
</tr> <tr> <td class="org-left"> <code>C-u M-x</code></td>
 <td class="org-left"> <code>universal-argument</code></td>
 <td class="org-left">Run command with additional options.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-orgb0322b0" class="outline-3">
 <h3 id="macros">Macros</h3>
 <div class="outline-text-3" id="text-macros">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>C-x (</code></td>
 <td class="org-left"> <code>kmacro-start-macro</code></td>
 <td class="org-left">Define keyboard macro.</td>
</tr> <tr> <td class="org-left"> <code>C-x )</code></td>
 <td class="org-left"> <code>kmacro-end-macro</code></td>
 <td class="org-left">End keyboard macro definition.</td>
</tr> <tr> <td class="org-left"> <code>C-x e</code></td>
 <td class="org-left"> <code>kmacro-end-and-call-macro</code></td>
 <td class="org-left">Playback keyboard macro, can just keep pressing  <code>e</code> after first press.</td>
</tr> <tr> <td class="org-left"> <code>C-x C-k <space></code></td>
 <td class="org-left"> <code>kmacro-step-edit-macro</code></td>
 <td class="org-left">Open keyboard macro debugger.</td>
</tr> <tr> <td class="org-left"> <code>C-x C-k e</code></td>
 <td class="org-left"> <code>edit-kbd-macro</code></td>
 <td class="org-left">Enter macro editor, (C-c C-c) to finish editing.</td>
</tr> <tr> <td class="org-left"> <code>C-x C-k n</code></td>
 <td class="org-left"> <code>kmacro-name-last-macro</code></td>
 <td class="org-left">Save the keyboard macro for later use.</td>
</tr> <tr> <td class="org-left"> </td>
 <td class="org-left"> <code>insert-kbd-macro</code></td>
 <td class="org-left">Insert a saved macro into the file, in Emacs lisp.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org8ac8290" class="outline-3">
 <h3 id="project">Project</h3>
 <div class="outline-text-3" id="text-project">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>C-x p !</code></td>
 <td class="org-left"> <code>project-shell-command</code></td>
 <td class="org-left">Run  <code>shell-command</code> in the current project’s root directory.</td>
</tr> <tr> <td class="org-left"> <code>C-x p &</code></td>
 <td class="org-left"> <code>project-async-shell-command</code></td>
 <td class="org-left">Run  <code>async-shell-command</code> in the current project’s root directory.</td>
</tr> <tr> <td class="org-left"> <code>C-x p f</code></td>
 <td class="org-left"> <code>project-find-file</code></td>
 <td class="org-left">Visit a file (with completion) in the current project.</td>
</tr> <tr> <td class="org-left"> <code>C-x p F</code></td>
 <td class="org-left"> <code>project-or-external-find-file</code></td>
 <td class="org-left">Visit a file (with completion) in the current project or external roots.</td>
</tr> <tr> <td class="org-left"> <code>C-x p b</code></td>
 <td class="org-left"> <code>project-switch-to-buffer</code></td>
 <td class="org-left">Display buffer in the selected window, for a buffer belonging to the current project.</td>
</tr> <tr> <td class="org-left"> <code>C-x p s</code></td>
 <td class="org-left"> <code>project-shell</code></td>
 <td class="org-left">Start an inferior shell in the current project’s root directory.</td>
</tr> <tr> <td class="org-left"> <code>C-x p d</code></td>
 <td class="org-left"> <code>project-find-dir</code></td>
 <td class="org-left">Start Dired in a directory inside the current project.</td>
</tr> <tr> <td class="org-left"> <code>C-x p D</code></td>
 <td class="org-left"> <code>project-dired</code></td>
 <td class="org-left">Start Dired in the current project’s root.</td>
</tr> <tr> <td class="org-left"> <code>C-x p v</code></td>
 <td class="org-left"> <code>project-vc-dir</code></td>
 <td class="org-left">Run VC-Dir in the current project’s root.</td>
</tr> <tr> <td class="org-left"> <code>C-x p c</code></td>
 <td class="org-left"> <code>project-compile</code></td>
 <td class="org-left">Run  <code>compile</code> in the project root.</td>
</tr> <tr> <td class="org-left"> <code>C-x p e</code></td>
 <td class="org-left"> <code>project-eshell</code></td>
 <td class="org-left">Start Eshell in the current project’s root directory.</td>
</tr> <tr> <td class="org-left"> <code>C-x p k</code></td>
 <td class="org-left"> <code>project-kill-buffers</code></td>
 <td class="org-left">Kill the buffers belonging to the current project.</td>
</tr> <tr> <td class="org-left"> <code>C-x p p</code></td>
 <td class="org-left"> <code>project-switch-project</code></td>
 <td class="org-left">Switch to another project by running an Emacs command.</td>
</tr> <tr> <td class="org-left"> <code>C-x p g</code></td>
 <td class="org-left"> <code>project-find-regexp</code></td>
 <td class="org-left">Find all matches for REGEXP in the current project’s roots.</td>
</tr> <tr> <td class="org-left"> <code>C-x p G</code></td>
 <td class="org-left"> <code>project-or-external-find-regexp</code></td>
 <td class="org-left">Find all matches for REGEXP in the project roots or external roots.</td>
</tr> <tr> <td class="org-left"> <code>C-x p r</code></td>
 <td class="org-left"> <code>project-query-replace-regexp</code></td>
 <td class="org-left">Query-replace REGEXP in all the files of the project.</td>
</tr> <tr> <td class="org-left"> <code>C-x p x</code></td>
 <td class="org-left"> <code>project-execute-extended-command</code></td>
 <td class="org-left">Execute an extended command in project root.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org2eafdaa" class="outline-3">
 <h3 id="balanced-expressions">Balanced Expressions</h3>
 <div class="outline-text-3" id="text-balanced-expressions">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>C-M-f</code></td>
 <td class="org-left"> <code>forward-sexp</code></td>
 <td class="org-left">Forward over an sexps.</td>
</tr> <tr> <td class="org-left"> <code>C-M-b</code></td>
 <td class="org-left"> <code>backward-sexp</code></td>
 <td class="org-left">Backward over a sexps.</td>
</tr> <tr> <td class="org-left"> <code>C-M-d</code></td>
 <td class="org-left"> <code>down-list</code></td>
 <td class="org-left">Move down into a sexps.</td>
</tr> <tr> <td class="org-left"> <code>C-M-u</code></td>
 <td class="org-left"> <code>backward-up-list</code></td>
 <td class="org-left">Move up out of a sexps.</td>
</tr> <tr> <td class="org-left"> <code>C-M-n</code></td>
 <td class="org-left"> <code>forward-list</code></td>
 <td class="org-left">Move forward to the sexps.</td>
</tr> <tr> <td class="org-left"> <code>C-M-p</code></td>
 <td class="org-left"> <code>backward-list</code></td>
 <td class="org-left">Move backward to the previous sexps.</td>
</tr> <tr> <td class="org-left"> <code>C-M-k</code></td>
 <td class="org-left"> <code>kill-sexp</code></td>
 <td class="org-left">Kill down into sexps.</td>
</tr> <tr> <td class="org-left"> <code>M-(</code></td>
 <td class="org-left"> <code>insert-parentheses</code></td>
 <td class="org-left">Wraps region in parenthesis.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-orgeadde9f" class="outline-3">
 <h3 id="query-replace">Query Replace</h3>
 <div class="outline-text-3" id="text-query-replace">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>M-%</code></td>
 <td class="org-left"> <code>query-replace</code></td>
 <td class="org-left">Start a query replace operation.</td>
</tr> <tr> <td class="org-left"> <code>!</code></td>
 <td class="org-left"> </td>
 <td class="org-left">Replace all remaining matches in this buffer with no more questions.</td>
</tr> <tr> <td class="org-left"> <code>^</code></td>
 <td class="org-left"> </td>
 <td class="org-left">Move point back to previous match.</td>
</tr> <tr> <td class="org-left"> <code>u</code></td>
 <td class="org-left"> </td>
 <td class="org-left">Undo previous replacement.</td>
</tr> <tr> <td class="org-left"> <code>U</code></td>
 <td class="org-left"> </td>
 <td class="org-left">undo all replacements.</td>
</tr> <tr> <td class="org-left"> <code>E</code></td>
 <td class="org-left"> </td>
 <td class="org-left">Edit the replacement string.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org7221059" class="outline-3">
 <h3 id="xref">Xref</h3>
 <div class="outline-text-3" id="text-xref">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>M-.</code></td>
 <td class="org-left"> <code>xref-find-definitions</code></td>
 <td class="org-left">Find definitions at point.</td>
</tr> <tr> <td class="org-left"> <code>M-,</code></td>
 <td class="org-left"> <code>xref-go-back</code></td>
 <td class="org-left">Pop marker and return.</td>
</tr> <tr> <td class="org-left"> <code>M-?</code></td>
 <td class="org-left"> <code>xref-find-references</code></td>
 <td class="org-left">Find references matching a pattern.</td>
</tr> <tr> <td class="org-left"> <code>C-M-.</code></td>
 <td class="org-left"> <code>xref-find-apropos</code></td>
 <td class="org-left">Find symbols matching a pattern.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org7d6a36f" class="outline-3">
 <h3 id="bookmarks">Bookmarks</h3>
 <div class="outline-text-3" id="text-bookmarks">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>C-x r m</code></td>
 <td class="org-left"> <code>bookmark-set</code></td>
 <td class="org-left">Create / set bookmark.</td>
</tr> <tr> <td class="org-left"> <code>C-x r b</code></td>
 <td class="org-left"> <code>bookmark-jump</code></td>
 <td class="org-left">Open bookmark.</td>
</tr> <tr> <td class="org-left"> <code>C-x r l</code></td>
 <td class="org-left"> <code>bookmark-bmenu-list</code></td>
 <td class="org-left">List bookmarks.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org09d9f03" class="outline-3">
 <h3 id="dired-buffer">Dired Buffer</h3>
 <div class="outline-text-3" id="text-dired-buffer">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>C-o</code></td>
 <td class="org-left"> <code>dired-display-file</code></td>
 <td class="org-left">Preview file but stay in Dired buffer.</td>
</tr> <tr> <td class="org-left"> <code>C-u k</code></td>
 <td class="org-left"> <code>dired-do-kill-lines</code></td>
 <td class="org-left">Remove section.</td>
</tr> <tr> <td class="org-left"> <code>X</code></td>
 <td class="org-left"> <code>dired-do-shell-command</code></td>
 <td class="org-left">Execute shell command on file.</td>
</tr> <tr> <td class="org-left"> <code>Q</code></td>
 <td class="org-left"> <code>dired-do-find-regexp-and-replace</code></td>
 <td class="org-left">Query replace marked files,  <code><space></code> accept,  <code>n</code> decline and  <code>C-x s</code> to save all.</td>
</tr> <tr> <td class="org-left"> <code>+</code></td>
 <td class="org-left"> <code>dired-create-directory</code></td>
 <td class="org-left">Create directory.</td>
</tr> <tr> <td class="org-left"> <code>^</code></td>
 <td class="org-left"> <code>dired-up-directory</code></td>
 <td class="org-left">Go up one directory.</td>
</tr> <tr> <td class="org-left"> </td>
 <td class="org-left"> <code>find-name-dired</code></td>
 <td class="org-left">Recursively find a file.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org57167b5" class="outline-3">
 <h3 id="interface-to-spell-ispell-and-on-the-fly-spell-flyspell">Interface To Spell (Ispell) and On The Fly Spell (Flyspell)</h3>
 <div class="outline-text-3" id="text-interface-to-spell-ispell-and-on-the-fly-spell-flyspell">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>M $</code></td>
 <td class="org-left"> <code>ispell-word</code></td>
 <td class="org-left">Check and correct spelling of the word at point.</td>
</tr> <tr> <td class="org-left"> <code>C-M i</code></td>
 <td class="org-left"> <code>completion-at-point</code></td>
 <td class="org-left">Complete the word before point based on the spelling dictionary.</td>
</tr> <tr> <td class="org-left"> <code>M-TAB</code></td>
 <td class="org-left"> <code>flyspell-auto-correct-word</code></td>
 <td class="org-left">Automatically corrects the current word at point, will also cycle between option.</td>
</tr> <tr> <td class="org-left"> <code>C-c $</code></td>
 <td class="org-left"> <code>flyspell-correct-word-before-point</code></td>
 <td class="org-left">Correct word before point.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org32f1199" class="outline-3">
 <h3 id="org-buffer">Org Buffer</h3>
 <div class="outline-text-3" id="text-org-buffer">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>S-M-RET</code></td>
 <td class="org-left"> <code>org-insert-todo-heading</code></td>
 <td class="org-left">Insert a new TODO entry below the current one.</td>
</tr> <tr> <td class="org-left"> <code>C-c / t</code></td>
 <td class="org-left"> <code>org-match-sparse-tree</code></td>
 <td class="org-left">View todo items in a sparse tree.</td>
</tr> <tr> <td class="org-left"> <code>C-c C-t</code></td>
 <td class="org-left"> <code>org-todo</code></td>
 <td class="org-left">Toggle todo item state.</td>
</tr> <tr> <td class="org-left"> <code>C-c C-s</code></td>
 <td class="org-left"> <code>org-schedule</code></td>
 <td class="org-left">Schedule todo item.</td>
</tr> <tr> <td class="org-left"> <code>C-c C-d</code></td>
 <td class="org-left"> <code>org-deadline</code></td>
 <td class="org-left">Add deadline to todo item.</td>
</tr> <tr> <td class="org-left"> <code>C-c [</code></td>
 <td class="org-left"> <code>org-agenda-file-to-front</code></td>
 <td class="org-left">Add file to agenda.</td>
</tr> <tr> <td class="org-left"> <code>C-c ]</code></td>
 <td class="org-left"> <code>org-remove-file</code></td>
 <td class="org-left">Remove file to agenda.</td>
</tr> <tr> <td class="org-left"> <code>C-c .</code></td>
 <td class="org-left"> <code>org-timestamp</code></td>
 <td class="org-left">Insert current date.</td>
</tr> <tr> <td class="org-left"> <code>C-c C-e</code></td>
 <td class="org-left"> <code>org-export-dispatch</code></td>
 <td class="org-left">Open exporter.</td>
</tr> <tr> <td class="org-left"> <code>C-c C-e #</code></td>
 <td class="org-left"> <code>org-export-dispatch</code></td>
 <td class="org-left">Insert template.</td>
</tr> <tr> <td class="org-left"> <code>C-c C-e P x</code></td>
 <td class="org-left"> <code>org-export-dispatch</code></td>
 <td class="org-left">Export specific project.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org93fae17" class="outline-3">
 <h3 id="eww">EWW</h3>
 <div class="outline-text-3" id="text-eww">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Command Invoked</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>B</code></td>
 <td class="org-left"> <code>eww-list-bookmarks</code></td>
 <td class="org-left">Display your bookmarks.</td>
</tr> <tr> <td class="org-left"> <code>b</code></td>
 <td class="org-left"> <code>eww-add-bookmark</code></td>
 <td class="org-left">Add the current page as a bookmark.</td>
</tr> <tr> <td class="org-left"> <code>l</code></td>
 <td class="org-left"> <code>eww-back-url</code></td>
 <td class="org-left">Go to the previously displayed page.</td>
</tr> <tr> <td class="org-left"> <code>r</code></td>
 <td class="org-left"> <code>eww-forward-url</code></td>
 <td class="org-left">Go to the next displayed page.</td>
</tr> <tr> <td class="org-left"> <code>g</code></td>
 <td class="org-left"> <code>eww-reload</code></td>
 <td class="org-left">Reload the current page.</td>
</tr> <tr> <td class="org-left"> <code>G</code></td>
 <td class="org-left"> <code>eww</code></td>
 <td class="org-left">Go to a new address.</td>
</tr> <tr> <td class="org-left"> <code>H</code></td>
 <td class="org-left"> <code>eww-list-histories</code></td>
 <td class="org-left">Shows a list of your histories.</td>
</tr> <tr> <td class="org-left"> <code>TAB</code></td>
 <td class="org-left"> <code>shr-next-link</code></td>
 <td class="org-left">Skip to the next link.</td>
</tr></tbody></table></div>
</div>

 <div id="outline-container-org03d15fc" class="outline-3">
 <h3 id="useful-commands">Useful Commands</h3>
 <div class="outline-text-3" id="text-useful-commands">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Command</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>keep-lines</code></td>
 <td class="org-left">Delete all lines not matching the provided regex.</td>
</tr> <tr> <td class="org-left"> <code>flush-lines</code></td>
 <td class="org-left">Delete all lines matching the provided regex.</td>
</tr> <tr> <td class="org-left"> <code>sort-lines</code></td>
 <td class="org-left">Sort lines in region alphabetically.</td>
</tr> <tr> <td class="org-left"> <code>delete-duplicate-lines</code></td>
 <td class="org-left">Delete all but one copy of any identical lines in the region.</td>
</tr> <tr> <td class="org-left"> <code>ff-find-other-file</code></td>
 <td class="org-left">Find the header or source file corresponding to this file.</td>
</tr></tbody></table></div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./emacs-efficiency.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./emacs-efficiency.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>FOSS : On Droid</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org9469ad7" class="outline-2">
 <h2 id="org9469ad7">Code is Source    <span class="tag"> <span class="fossdroid">fossdroid</span>  <span class="android">android</span></span></h2>
 <div class="outline-text-2" id="text-org9469ad7">
 <p>
As we know, Android is widely popular OS for many phone. But these days its all filled with junks and bloated apps, these are to say so called  <b>“Popular Android Apps”</b> or  <b>“Trending Apps”</b>. The reason simply would be “everyone in my circle uses it” or “I use it because  <span class="underline">they</span> use it”.
</p>

 <p>
But surely you are not giving yourself some privacy or  <b>space</b> that you need for your own  <b>personal phone</b>.
I’m talking about using Free/Libre and Open Source (FOSS) Apps. Free doesn’t mean by price, Free means  <b>Freedom</b>. Freedom that comes with :
</p>
 <ul class="org-ul"> <li>No Trackers.</li>
 <li>No Ads.</li>
 <li>Minimal permission.</li>
 <li>Has customization to users need.</li>
 <li>No Restrictions.</li>
</ul> <p>
These can be achieved in this modern time, by Discovering and using FOSS Apps, the best place being  <a href="https://f-droid.org">F-droid</a>  or  <a href="https://libreddit.kavin.rocks/r/fossdroid">r/fossdroid</a>.
</p>

 <p>
There are pretty much all apps under FOSS area for every purpose, they are good looking with  <b>Modern UI</b>,  <b>Lots of Customizations</b> and  <b>friendly with Battery</b>.
</p>

 <p>
I happened to search for book and novel reader and found very good apps there, like QuickNovel.
There is a Manga reader and lots more for every purpose.
</p>

 <p>
I exclusively use every apps from F-droid, because they are great.
You should also use it, as you might find something interesting and surely, gets Surprised; and say in your head,  <b> <i>Gosh I should have known this before</i></b>.
</p>

 <hr></hr> <p>
Some of the cool apps I use everyday :
</p>

 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Class</th>
 <th scope="col" class="org-left">Apps</th>
</tr></thead> <tbody> <tr> <td class="org-left">Launcher</td>
 <td class="org-left">Kvæsitso ( <a href="https://apt.izzysoft.de/fdroid/index/apk/de.mm20.launcher2.release">izzydroid</a>,  <a href="https://github.com/MM2-0/Kvaesitso">git</a>)</td>
</tr> <tr> <td class="org-left">F-droid Client</td>
 <td class="org-left">Neo Store ( <a href="https://f-droid.org/en/packages/com.machiav3lli.fdroid/">fdroid</a>,  <a href="https://github.com/NeoApplications/Neo-Store">git</a>)</td>
</tr> <tr> <td class="org-left">Browser</td>
 <td class="org-left">Mull ( <a href="https://f-droid.org/en/packages/us.spotco.fennec_dos/">fdroid</a>,  <a href="https://gitlab.com/divested-mobile/mull-fenix">git</a>)</td>
</tr> <tr> <td class="org-left">Rss Reader</td>
 <td class="org-left">Read You ( <a href="https://f-droid.org/en/packages/me.ash.reader/">fdroid</a>,  <a href="https://github.com/Ashinch/ReadYou">git</a>)</td>
</tr> <tr> <td class="org-left">YouTube</td>
 <td class="org-left">LibreTube ( <a href="https://f-droid.org/en/packages/com.github.libretube/">fdroid</a>,  <a href="https://github.com/libre-tube/LibreTube">git</a>)</td>
</tr> <tr> <td class="org-left">PDF/Ebook Reader</td>
 <td class="org-left">Librera Reader ( <a href="https://f-droid.org/en/packages/com.foobnix.pro.pdf.reader/">fdroid</a>,  <a href="https://github.com/foobnix/LibreraReader">git</a>)</td>
</tr> <tr> <td class="org-left">Manga Reader</td>
 <td class="org-left">Tachiyomi ( <a href="https://f-droid.org/en/packages/eu.kanade.tachiyomi/">fdroid</a>,  <a href="https://github.com/tachiyomiorg/tachiyomi">git</a>)</td>
</tr> <tr> <td class="org-left">Password Manager</td>
 <td class="org-left">KeePassDX ( <a href="https://f-droid.org/en/packages/com.kunzisoft.keepass.libre/">fdroid</a>,  <a href="https://github.com/Kunzisoft/KeePassDX">git</a>)</td>
</tr> <tr> <td class="org-left">Novel Reader</td>
 <td class="org-left">QuickNovel ( <a href="https://apt.izzysoft.de/fdroid/index/apk/com.lagradost.quicknovel">izzydroid</a>,  <a href="https://github.com/LagradOst/QuickNovel">git</a>)</td>
</tr> <tr> <td class="org-left">Keyboard</td>
 <td class="org-left">Unexpected Keyboard ( <a href="https://f-droid.org/en/packages/juloo.keyboard2/">fdroid</a>,  <a href="https://github.com/Julow/Unexpected-Keyboard">git</a>)</td>
</tr> <tr> <td class="org-left">Media Player</td>
 <td class="org-left">VLC ( <a href="https://f-droid.org/en/packages/org.videolan.vlc/">fdroid</a>,  <a href="https://code.videolan.org/videolan/vlc-android">git</a>)</td>
</tr> <tr> <td class="org-left">Gallery + Calendar (many more)</td>
 <td class="org-left">Simple Tools Suite ( <a href="https://search.f-droid.org/?lang=en&q=simple+tools">fdroid</a>,  <a href="https://github.com/SimpleMobileTools">git</a>,  <a href="https://simplemobiletools.com">site</a>)</td>
</tr> <tr> <td class="org-left">Note Taking</td>
 <td class="org-left">Orgzly ( <a href="https://f-droid.org/en/packages/com.orgzly/">fdroid</a>,  <a href="https://github.com/orgzly/orgzly-android">git</a>)</td>
</tr></tbody></table> <hr></hr> <div class="org-center">
 <p>
With that fossed, I hope your phone gets a new life and finally breathes alive!
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./foss-droid.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./foss-droid.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Imposter Syndrome : Formula for Success</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-orgd5270b1" class="outline-2">
 <h2 id="orgd5270b1">Rally & March    <span class="tag"> <span class="phenomenon">phenomenon</span>  <span class="success">success</span>  <span class="skill">skill</span>  <span class="imposter">imposter</span>  <span class="psychology">psychology</span></span></h2>
 <div class="outline-text-2" id="text-orgd5270b1">
 <ul class="org-ul"> <li>Have you ever felt a fear of losing or doubt your own ability?</li>
 <li>Have you felt unworthy, lost your self esteem due to a mistake?</li>
 <li>Are you feeling constant fear of being discovered rather than being proud?</li>
</ul> <p>
The matter is, is these sound true or happening at some moment, let me condition it as  <b>“Imposted Syndrome”</b>.
</p>

 <p>
You might remember the word “Imposter” from the most popular mobile game during lockdown,  <b>Among us</b> ( <a href="https://www.innersloth.com/games/among-us/">site</a>), yeah as the name suggests it means one who deceives.
</p>

 <p>
But imposter syndrome is seriously for real, a condition, which people do experience in their life. They don’t usually realize or find its symptoms as it is in itself a  <span class="underline">negative feeling</span>, provoking  <a href="https://www.psychologytoday.com/intl/basics/anxiety">anxiety</a> and  <a href="https://www.psychologytoday.com/intl/basics/fear">fear</a>.
</p>


 <ul class="org-ul"> <li>People with imposter syndrome feel inauthentic, question their own ability to be</li>
</ul> <p>
successful, and are convinced that they do not belong in the roles they stand, even
when they experience success.
</p>

 <p>
I myself have felt this, when I was starting out journey to learn new course (say programming language), I felt it was oceanic knowledge where I only had a boat.
</p>
</div>

 <div id="outline-container-org13edc78" class="outline-3">
 <h3 id="org13edc78">Ways to stop Imposter Syndrome</h3>
 <div class="outline-text-3" id="text-org13edc78">
 <blockquote>
 <p>
 <i>Where there is a will, there is a way.</i>
</p>
</blockquote>
</div>


 <div id="outline-container-org07dc2e6" class="outline-4">
 <h4 id="org07dc2e6">Trust the Process</h4>
 <div class="outline-text-4" id="text-org07dc2e6">
 <p>
Reflect on your actions, see the world praising you. Instead of listening to the negative feeling from your head, listen to the feedback from others.
</p>

 <ul class="org-ul"> <li>Others believe in you</li>
 <li>You don’t believe in yourself</li>
 <li>Yet you believe yourself instead of them</li>
</ul> <p>
If you doubt yourself, shouldn’t you also doubt your judgment of yourself?
</p>
</div>
</div>

 <div id="outline-container-org2ab1a47" class="outline-4">
 <h4 id="org2ab1a47">Look for Evidence</h4>
 <div class="outline-text-4" id="text-org2ab1a47">
 <p>
Fine you feel it that way, see if you can find evidence and measures. Think of some example where you have made some positive impact on others, how much change have you brought them.
</p>
</div>
</div>

 <div id="outline-container-orgdd80dcd" class="outline-4">
 <h4 id="orgdd80dcd">Remember the Journey</h4>
 <div class="outline-text-4" id="text-orgdd80dcd">
 <p>
Look back at the steps you have taken, how was the process of learning from scratch, rock-bottom.
</p>

 <p>
 <i>’It will get better and you’ll be more proud of yourself.’</i>
</p>
</div>
</div>

 <div id="outline-container-orgf652181" class="outline-4">
 <h4 id="orgf652181">Turn the Tables</h4>
 <div class="outline-text-4" id="text-orgf652181">
 <p>
Make it a strenth, refrain from doubts. Those with imposter syndrome are more likely to say “I don’t know” when they don’t know. This is an advantage. Overconfident people assume they have all the answers, even when they don’t.
</p>

 <p>
Humility, uncertainty, and self-doubt are part of the learning process. The key is to believe in your ability to learn.
</p>
</div>
</div>


 <div id="outline-container-orgf183bc4" class="outline-4">
 <h4 id="orgf183bc4">Suggested Reads</h4>
 <div class="outline-text-4" id="text-orgf183bc4">
 <p>
If you want to explore more on this concepts :
</p>

 <ol class="org-ol"> <li> <a href="https://www.psychologytoday.com/intl/blog/all-kids-thriving/202302/the-power-of-belonging">The Power of Belonging</a></li>

 <li> <a href="https://www.psychologytoday.com/intl/blog/on-your-way-with-adhd/202302/the-connection-between-adhd-and-imposter-syndrome">Connection between ADHD and Imposter Syndrome</a></li>
</ol></div>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./imposter-syndrome.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./imposter-syndrome.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>My Linux Journey</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org787cce9" class="outline-2">
 <h2 id="org787cce9">The Freedom    <span class="tag"> <span class="distro">distro</span>  <span class="linux">linux</span></span></h2>
 <div class="outline-text-2" id="text-org787cce9">
 <p>
 <b>Small info/log on my linux journey and my experience.</b>
</p>

 <hr></hr> <p>
Linux is not widely recommended or discussed topic among real life friends or circle, every system comes pre-installed with win-dows, and its no big surprise people don’t have a feel towards their usage of OS.
</p>

 <p>
Not many people update their system, not many try to explore Alternative softwares, they stick very much to the default out-of-the-box Application. Tbh if you deep dive and understand windows, it is total crap,  <b>Obnoxious</b>.
</p>

 <p>
My reason to switch over to Linux was simple as other had :
</p>
 <ul class="org-ul"> <li>No Freedom</li>
 <li>Slow win-dows</li>
 <li>Cannot even run the browser properly</li>
 <li>Cannot even do multitasking efficiently</li>
 <li>The bloatware crap were too much</li>
 <li>Updates are like  <b>eternal sleep</b> (No-sense updates)</li>
</ul> <p>
My linux journey was from Linux Mint > EndeavourOS > Arch Linux > and now NixOS.
</p>
</div>

 <div id="outline-container-orgd3e7d3c" class="outline-3">
 <h3 id="orgd3e7d3c">The Embark</h3>
 <div class="outline-text-3" id="text-orgd3e7d3c">
 <p>
I started to explore some YouTube video on Linux (as a normie at that time), soon I got familiar with good explanation, thankfully CTT had made an Linux Mint playlist and it helped to installing the first and the best  <b>Beginner Distro</b>, the  <b>Linux Mint</b>.
</p>

 <p>
The gain and experience was  <b>Ultimate</b>. Loved it, felt the Freedom, felt the deeper understanding of a  <b>real System</b>.
</p>

 <p>
I choose the flagship Cinnamon DE and it was very comfortable.
</p>

 <p>
After few months, I finally stumbled upon a drawback here, it was stable packages (old package versions).
</p>

 <p>
That is when I saw the concept of  <b>Rolling release</b>, at that time  <b>EndeavourOS</b> was the flavor of Linux distro at that time, peaked the distrowatch and all. So guess what, I installed EvndeavourOs and expanded more love towards terminal and latest packages.
</p>

 <p>
Soon i felt i did not needed what all EndeavourOS ships, I want custom or DIY (something i take control of), then i realized, EOS was arch-based, so guess again, went with the great Independent Arch linux.
</p>

 <p>
Boom, the best linux journey (learning), I only mean it for learning, other than that Arch is just cool kids bag.
</p>

 <p>
Finally, now with some other jolt of distro trend, I stumbled the name  <b>“NixOS”</b>.
It is somewhat reinventing the wheel, but it is so different that I’d hate to even say it as a Linux distro, It stands unique with linux distros.
</p>

 <p>
Tbh I loved LM and Arch alot, I was a devotee to Arch too, and I hated Nix when I tried, cause things were weird.
</p>
 <ul class="org-ul"> <li>You won’t know where to start nor what to refer</li>
 <li>Flakes or home-manager, How to understand?</li>
 <li>Do nix-env or rebuild all the time?</li>
 <li> <p>
What files to edit to achieve same setup as my previous distro?
</p>

 <p>
These were all the things that I hated and was frustrated about, there was still many things that felt hard.
I did leave Nix and install Arch few times back and forth, I was debating with myself and id my own research all over Internet.
</p>

 <p>
That is when I thought nix lacked Documentation or good YouTuber to speak of, I really wish one of them could explain and make it their distro to explain timely on things.
</p>

 <p>
Fine, somehow forced myself and came a long way of setting up Good working nixos config, now I’m on flakes.
</p>

 <p>
Nix is great if it works as expected or if we make it work, but, if I get stuck or the issue goes for days that is when I really hate Nix, because it ain’t easy to solve some unique issues. Most of these apply for HomeManager actually, it adds more trouble.
</p>

 <p>
It is adviced to learn how Nix works or Nix as Functional Programming Language.
</p></li>
</ul> <hr></hr> <p>
Okay, so it was not about shilling Nix or anything, Just my Linux experience.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./linux-journey.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./linux-journey.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Linux : The Matrix</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org4be74ef" class="outline-2">
 <h2 id="org4be74ef">Terminals to Rescue    <span class="tag"> <span class="terminal">terminal</span>  <span class="cheatsheet">cheatsheet</span>  <span class="minimal">minimal</span></span></h2>
 <div class="outline-text-2" id="text-org4be74ef">
 <p>
There are tons of linux command line cheatsheet or guides.
</p>

 <p>
Here are some of the best reads, I suggest you to go throught each of it,  <b>It’s a gem</b>.
</p>


 <ul class="org-ul"> <li> <a href="https://github.com/jlevy/the-art-of-command-line">The Art of Command Line</a> — notes and tips on using the command-line, suitable for both beginners and experienced users.</li>
 <li> <a href="https://www.commandlinefu.com/commands/browse/sort-by-votes">commandlinefu</a> — command-line gems, includes a handy search feature.</li>
 <li> <a href="https://github.com/tldr-pages/tldr">tldr</a> — collection of community-maintained help pages for command-line tools.</li>
 <li> <a href="https://explainshell.com/">explainshell</a> — write down a command-line to see the help text that matches each argument.</li>
 <li> <a href="http://www.compciv.org/unix-tools/">General purpose command-line tools</a> — examples for most common usecases.</li>
 <li> <a href="https://devmanual.gentoo.org/tools-reference/bash/index.html">Bash reference cheatsheet</a> — nicely formatted and explained well.</li>
 <li> <a href="https://devhints.io/bash">Bash scripting cheatsheet</a> — quick reference to getting started with Bash scripting.</li>
</ul> <hr></hr> <div class="org-center">
 <p>
 <b>With that  <code>coded</code>, I hope you enjoy the terminal. Unleash the Matrix</b>.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./linux-matrix.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./linux-matrix.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Literate org config</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org0a3f51c" class="outline-2">
 <h2 id="org0a3f51c">Organizing Config</h2>
 <div class="outline-text-2" id="text-org0a3f51c">
 <p>
Configuration files as we know are the text to instruct the program to modify and tweak to our needs. Every Open-Source, hack-able software or tool has configuration files provided for the choice of user’s needs. Most of the tools provide simple and basic configuration with JSON-like formats,  <code>Yaml</code> and  <code>Toml</code>. For the word, they are not extensible, as  <code>ml</code> stands, they are merely for markup to already defined instructions.
</p>

 <p>
Tools which are really extensible occupy with the power of a simple or real programming language, to which user gets only sky as the limit to configure. Some tools which are in my mind of this matter are Emacs, neovim, NixOS (home-manager).
</p>

 <p>
So eventually with more configurations added and tweaked, it becomes evident that it needs to be organized. Humans cannot read a long mass of codes which does not even have basic design principle in it.
</p>

 <p>
This realization leads to documenting the codes with comments ( <i>the grey</i>) and it obviously adds more lines. There after the thoughts lead to modular config, splitting up of files in sensible manner and to import from one stop.
</p>

 <p>
Now, wait.., This sounds like we are down to creating a file hierarchy for config files, good at the initial days, but sooner or later hierarchy might look alien. I bet it!
</p>

 <p>
That’s where I’m stopping you can covering up next on writing Literate configuration, like with Org-mode.
</p>
</div>

 <div id="outline-container-org24aae54" class="outline-3">
 <h3 id="org24aae54">Org-mode Config</h3>
 <div class="outline-text-3" id="text-org24aae54">
 <p>
I won’t introduce about org-mode, please do check  <a href="https://orgmode.org">here</a>, hopefully it gives you an idea (I mean you should have read whole documentation/manual there). Additionally here is a  <a href="https://en.wikipedia.org/wiki/Org-mode">Wikipedia reference</a> which is enough to introduce.
</p>

 <p>
The concept of  <a href="https://en.wikipedia.org/wiki/Literate_programming">Literate programming</a> is having the user’s natural language written down in correspondence to code blocks. It adds human-ness to the code, and the instructions we need to understand. Over technical work, it can reduce the usage of manual pages and documentation, wait, that is not a good idea to avoid them, but for something to understand that we wrote ourselves, literate programming helps to add notes.
</p>

 <p>
The concept is fairly like maintaining a notebook or documentation guide itself, but it also comes with its power.
</p>

 <p>
Org-mode has tons of features that helps in various categories. Prime use is for maintaining GTD, Notes, Latex, Journaling…  <i>infinity?</i>
</p>

 <p>
The main topic is, I tried maintaining modular config for Emacs and Nixos, and after some days, I myself was wondering and wasting time on thinking where did I place some content for this categories and was stuck with file hierarchy for several moments. The main obstacle is file hierarchy might turn out to be complex and redundant.
</p>

 <p>
That’s where I decided to move back all to literate config. I came across  <a href="https://github.com/rasendubi/dotfiles">rasendubi</a> dotfiles and he also used Literate org config for both Nixos and Emacs. Eventually I did too, here is the  <a href="https://github.com/idlip/d-nix">repo</a>.
</p>

 <p>
The key benefits were, single org file to rule them all. I can integrate well with Emacs, yes, dependency might be Emacs, then too it is plain text format. Org gives us the power to tangle, annotate, add notes, tables, anything with the Source Code Blocks.
For many configs or code, we forget why we wrote or why it is uniquely required, and nobody likes to waste time digging on why it is there, of course comments are helpful, but not everywhere to make it more head ache?
Also I don’t have navigate over the file hierarchy again and again with paths, simple single org is the stop.
</p>

 <p>
Org allows us to write notes there, I do manage lot of TODO and plans over the files, and forget everything. When I revisit or when I want to care, I can see what are the plans and I can execute it timely there after. Org literate config acts the source of truth, for information and understanding for my own level.
</p>

 <p>
As I bestowed this in practice, I noticed that flow of thoughts and expression of it at that time is the crucial thing. Again, for a thought to come and just vanish, its a haze. Even merely  <i>sixty seconds</i> is enough to forget. Org could also fill that void, but just capturing the running thought at that time, and later to expand on it.
</p>

 <p>
Managing time is precious and Org-mode help with that, with plans Todo & Schedules. Also, endless customization does not fetch any fruit. Having a cleaning kind of a day every month or twice a year can help on tweaking or fixing the necessary lines over the Org config.
</p>

 <p>
In a recent snippet on  <a href="file:///home/runner/d-git/d-site/content/snippets/organize-file.html">Organize File</a>, I was about falling out on maintaining notes. From that scenario also the lesson learned is that, more than maintaining notes, the actual flow of thought and feeling at right time is most important and beats the best organizer anywhere out there. I mean, the goal of note-taking or writing down should be to transcribe the thoughts and knowledge in a approachable manner.
</p>
</div>

 <div id="outline-container-org3e57e93" class="outline-4">
 <h4 id="org3e57e93">Key Takeaways</h4>
 <div class="outline-text-4" id="text-org3e57e93">
 <ul class="org-ul"> <li>Org-mode helps in managing and maintaining configuration files.</li>
 <li>Learning can be stressed, and is the key for writing out Literate programming.</li>
 <li>Things are easier to forget, annotating it our own words can help in better understanding and retention of information.</li>
 <li>Org config is the source of truth.</li>
 <li>Notes should be meant to capture the thoughts and feeling at that time of occurence.</li>
</ul></div>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./literate-config.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./literate-config.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Nix: Home for Acer</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-orgd924ab1" class="outline-2">
 <h2 id="orgd924ab1">The Machine    <span class="tag"> <span class="linux">linux</span>  <span class="nixos">nixos</span></span></h2>
 <div class="outline-text-2" id="text-orgd924ab1">
 <p>
In this post am sharing some of the experience of using my new laptop,  <b>Acer swift Go Oled</b>. Compact, Premium ultra-book with Oled, Yes, a good hand made mobile laptop.
</p>

 <p>
As expected and as usual, it got windows 11 and first major encounter was heating and battery issue. It got me scared as it felt wrong decision. Since many claimed windows gives better battery life than Linux. It gave me nightmare of installing Linux too, really, new laptop with 4-5 hours of battery, for oled with black screens?
</p>

 <p>
Anyways, windows made me really tinker to my needs, went on with  <code>winutils</code> and de-bloated few stuffs and made it somewhat tacit for me, then too I demanded more of it. To which windows felt weird and too much to handle. Thus did finally decide to dual boot or straightaway to erase disk for Linux. My first thought of choice was to use Arch with gnome, but since I had well maintained  <a href="https://github.com/idlip/d-nix">nixos config</a>, I went with same config without much a-due.
</p>

 <p>
Viola it gave me the exact setup I was looking for, enabling my hand to feel back in pace. Yet I was worried about battery and heating point of view, although many say,  <code>laptops arent made to run on battery</code>, yet the heat? the air exhaust hitting my oled display directly?.
</p>

 <p>
I gave a shot to  <code>auto-cpufreq</code>, it did a well decent job, yet I felt too little gain, I did change  <code>intel_pstate</code> to  <code>acpu</code> one. All i noticed is it lowered the max frequency rate from 4.3GHz to 3.2GHz.
</p>

 <p>
Later on after many rebuilds, I saw Nixos  <a href="https://nixos.wiki/wiki/Laptop">wiki on laptop</a>, may seem outdated, but it was legit, and I did enable service such as  <code>thermald</code>,  <code>tlp</code> and viola later on I noticed it works well. Seriously I don’t know how, it gave me better battery life, less heating in Linux (nixos) than windows. Maybe magical to me as others claim vice-versa.
</p>

 <p>
Nonetheless, nixos handled the magics of services and making it a better experience by just writing one line of configs to  <code>true;</code>. My desktop runs Hyprland (wayland) and it works flawlessly.
</p>

 <p>
Okay, let me tell you about Finger Print, it gave me little trouble, and funny enough, it was again just to say  <code>true;</code> on a line.
</p>

 <p>
I have FP, so obviously I wanted to be cool looking by using it, I initially did not expect FP to work, again online poeple said so. I was following some debian/ubuntu help on FP and enabling some drivers and all, it did not work. Later I gotta know that  <code>fprintd</code> latest one already has the support for my FP id, so just did enable  <code>fprintd</code> and viola! viola!, now I login in TTY with FingerPrint.
</p>

 <p>
Although I wasted some time one tinkering and making it to work on my needs, I was not doing work I wanted, thus decided to settle and do productive tasks from then on. Anyway, whatever you customize it will be little to no gain. That’s why I decided to make and get my blog going, it is better to make one day each month or on boring holiday to do cleaning and customizing on OS.
</p>

 <p>
Finally, It has become a pleasant experience to get nix and make it work as I expected on  <b>Acer</b>.
</p>

 <p>
Yet one thing remains unexplored, fan controlling. I see no mention of fan or  <span class="underline">RPM</span> via  <code>sensors</code> command, so one way is to check another tool. I skipped that part, since I don’t face heating issue or high fan noise even when I’m plugged in.
</p>

 <p>
Ultimately one more thing making all experience better is the  <b>GOAT Emacs</b>. Bringing back my config and using it with more speed is another level of bliss.
</p>

 <p>
This has become another embark of a journey, where the todo’s are just piling even more, and it looks fun to explore more and utilize efficiently for learning.
</p>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./nix-acer.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./nix-acer.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Nix Learning</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org24ec8e9" class="outline-2">
 <h2 id="org24ec8e9">Nobody can Explain    <span class="tag"> <span class="linux">linux</span>  <span class="resources">resources</span>  <span class="nixos">nixos</span></span></h2>
 <div class="outline-text-2" id="text-org24ec8e9">
 <p>
NixOS is definitely an advanced Linux distro, but it ain’t easy to understand overnight or like Archlinux to have easy manual, but it sure has alot on the table. There is whole bunch of families like Nix functional language, Nix package manager… so and on with the prefix “nix”.
</p>

 <p>
This is really confusing, many hate nix and are not convinced to go long run just because of this difficulty (mess?). To make a simple thing work as expected, you need to go through such a rabbit hole.
But once you know Nix* (families), everything will make sense, and you would feel bad to go back to old traditional Linux manners.
</p>

 <p>
These are some of the learning resources, which are rich in content and nonetheless, will be confusing at some point. But engineers do have spared their time in writing these, taking actions, to reach some audience and solve some of the caveats of Nix. So dig through and learn new ;)
</p>
</div>

 <div id="outline-container-org2d5155e" class="outline-3">
 <h3 id="org2d5155e">nix-learning</h3>
 <div class="outline-text-3" id="text-org2d5155e">
</div>
 <div id="outline-container-org00c891d" class="outline-4">
 <h4 id="uncategorized">Uncategorized</h4>
 <div class="outline-text-4" id="text-uncategorized">
 <ul class="org-ul"> <li> <a href="https://youtu.be/m4sv2M9jRLg">Nix Fundamentals</a> (Video)</li>
 <li> <a href="https://stephank.nl/p/2020-06-01-a-nix-primer-by-a-newcomer.html">A Nix terminology primer by a newcomer</a> - Stéphan Kochen</li>
 <li> <a href="https://shopify.engineering/what-is-nix">What Is Nix</a></li>
 <li> <a href="https://nasirhm.github.io/posts/getting-started-with-nix-introduction/">Getting Started With Nix: Introduction</a> - Nasir Hussain</li>
 <li> <a href="https://blog.sulami.xyz/posts/nix-for-developers/">Lightning
Introduction to Nix for Developers</a> - Robin Schroer</li>
 <li> <a href="https://blog.knightsofthelambdacalcul.us/posts/2020-06-20-nix-nixos-thoughts/">Nix(OS)
Thoughts</a> - ?</li>
 <li> <a href="https://fzakaria.com/2020/11/17/on-demand-linked-libraries-for-nix.html">On-demand
linked libraries for Nix</a> - Farid Zakaria</li>
 <li> <a href="https://serokell.io/blog/what-is-nix">What Is Nix and Why You Should
Use It</a> - ?</li>
 <li> <a href="https://push.cx/2018/nixos">NixOS on prgmr and Failing to Learn
Nix</a> - Peter Bhat Harkins</li>
 <li> <a href="https://www.tweag.io/blog/2020-09-10-nix-cas/">Towards a
content-addressed model for Nix</a> - Théophane Hufschmitt</li>
 <li> <a href="https://lucperkins.dev/blog/nix-channel/">The easiest way (I’ve
found) to create your own Nix channel</a> - Luc Perkins</li>
 <li> <a href="https://www.johnbcoughlin.com/posts/nix-dynamic-linking/">Debugging
a dynamic linking bug in a Nix project</a> - Jack Coughlin</li>
 <li> <a href="https://notes.neeasade.net/adhoc-executable-patching-on-nix.html">adhoc
executable patching on nixos</a> - ?</li>
 <li> <a href="https://maxmcd.com/posts/strategies-for-binary-relocation/">Strategies
for Binary Relocation In Functional Build Systems</a> - Max McDonnell</li>
 <li> <a href="https://christine.website/blog/how-i-start-nix-2020-03-08">How I
Start: Nix</a> - Christine Dodrill</li>
 <li> <a href="https://christine.website/blog/i-was-wrong-about-nix-2020-02-10">I
was Wrong about Nix</a> - Christine Dodrill</li>
 <li> <a href="https://www.infoq.com/articles/configuration-management-with-nix/">Purely
Functional Configuration Management with Nix and NixOS</a> - Eelco
Dolstra</li>
 <li> <a href="https://bgottlob.com/post/2019-05-29-nix-use-cases/">Basic Use-Cases
of the Nix Package Manager</a> - Brandon Gottlob</li>
 <li> <a href="https://thomazleite.com/posts/development-with-nix-python/">Development
with Nix: Python</a> - Thomaz Leite</li>
 <li> <a href="https://medium.com/dapphub/dapp-tools-and-the-nix-package-manager-c4c692c87310">Dapp
tools and the Nix package manager</a> - Mikael Brockman</li>
 <li> <a href="http://gfxmonk.net/2015/01/03/nixos-and-stateless-deployment.html">NixOS
and Stateless Deployment</a> - ?</li>
 <li> <a href="https://christine.website/blog/nixos-encrypted-secrets-2021-01-20">Encrypted
Secrets with NixOS</a> - Christine Dodrill</li>
 <li> <a href="https://begriffs.com/posts/2016-08-08-intro-to-nixos.html">Purely
Functional Linux with NixOS</a> - Joe Nelson</li>
 <li> <a href="https://www.tweag.io/blog/2018-03-15-bazel-nix/">Nix + Bazel = fully
reproducible, incremental builds</a> - Mathieu Boespflug, Théophane
Hufschmitt</li>
 <li> <a href="https://zenhack.net/2016/01/24/reflections-on-nixos.html">Reflections
On NixOS</a> - Ian Denhardt</li>
 <li> <a href="https://blog.mayflower.de/5800-Hardening-Compiler-Flags-for-NixOS.html">Hardening
Compiler Flags for NixOS</a> - Franz Pletz</li>
 <li> <a href="https://hugoreeves.com/posts/2019/nix-home/">Your home in Nix
(dotfile management)</a> - Hugo Reeves</li>
 <li> <a href="https://christine.website/blog/nixos-desktop-flow-2020-04-25">My
NixOS Desktop Flow</a> - Christine Dodrill</li>
 <li> <a href="https://tailscale.com/blog/nixos-minecraft/">Tailscale on NixOS: A
new Minecraft server in ten minutes</a> - Christine Dodrill</li>
 <li> <a href="https://terinstock.com/post/2021/01/Setting-up-a-git-server-on-NixOS/">Setting
up a git server on NixOS</a> - Terin Stock</li>
 <li> <a href="https://myme.no/posts/2020-01-26-nixos-for-development.html">NixOS:
For developers</a> - Martin Myrseth</li>
 <li> <a href="https://myme.no/posts/2019-07-01-nixos-into-the-deep-end.html">NixOS:
Into the deep end</a> - Martin Myrseth</li>
 <li> <a href="https://rgoswami.me/posts/ccon-tut-nix/">A Tutorial Introduction to
Nix</a> - Rohit Goswami</li>
 <li> <a href="https://zimbatm.com/benchmark-nixpkgs">Benchmarking nixpkgs
builds</a> - Jonas Chevalier</li>
 <li> <a href="https://zimbatm.com/experiment-recursive-nix">Recursive Nix
experiment</a> - Jonas Chevalier</li>
 <li> <a href="https://zimbatm.com/deploying-k8s-apps-with-kubenix">Deploying
Kubernetes apps with KubeNix</a> - Jonas Chevalier</li>
 <li> <a href="https://github.com/tazjin/nix-1p">Nix - A One Pager</a> - Vincent Ambo</li>
 <li> <a href="https://foo-dogsquared.github.io/blog/posts/moving-into-nixos/">Moving
into NixOS</a> - Gabriel Arazas</li>
 <li> <a href="https://www.willghatch.net/blog/2020/06/27/nixos-the-good-the-bad-and-the-ugly/">NixOS:
the good, the bad, and the ugly</a> - William G Hatch</li>
 <li> <a href="https://www.nmattia.com/posts/2018-03-21-nix-reproducible-setup-linux-macos.html">Nix:
A Reproducible Setup for Linux and macOS</a> - Nicolas Mattia</li>
 <li> <a href="https://www.nmattia.com/posts/2019-01-15-easy-peasy-nix-versions.html">Easy
Peasy Nix Versions</a> - Nicolas Mattia</li>
 <li> <a href="https://www.nmattia.com/posts/2019-10-08-runtime-dependencies">Recovering
Nix derivation attributes of runtime dependencies</a> - Nicolas Mattia</li>
</ul> <div class="html">
 <p>
<!– TODO: add more from their website –>
</p>

</div>

 <ul class="org-ul"> <li> <a href="https://ops.functionalalgebra.com/nix-by-example/">Nix By
Example</a> - Susan Potter</li>
 <li> <a href="https://ops.functionalalgebra.com/nixops-by-example/">NixOps By
Example</a> - Susan Potter</li>
 <li> <a href="https://ops.functionalalgebra.com/nixos-by-example/">NixOS By
Example</a> - Susan Potter</li>
 <li> <a href="https://ops.functionalalgebra.com/2018/04/18/inspecting-nix-lambda-named-arguments/">Inspecting
Nix lambda function named arguments</a> - Susan Potter</li>
</ul> <div class="html">
 <p>
<!– TODO: add Tweag Nix flakes –>
</p>

</div>
</div>
</div>

 <div id="outline-container-org49d4a1a" class="outline-4">
 <h4 id="overview">Overview</h4>
 <div class="outline-text-4" id="text-overview">
 <ul class="org-ul"> <li> <a href="https://web.archive.org/web/20210123223258/https://ebzzry.io/en/nix/">A
Gentle Introduction to the Nix Family</a></li>
</ul></div>
</div>

 <div id="outline-container-org7fc995a" class="outline-4">
 <h4 id="nix-the-language">Nix the language</h4>
 <div class="outline-text-4" id="text-nix-the-language">
 <ul class="org-ul"> <li> <a href="https://nixcloud.io/tour">A tour of Nix</a> - an introduction to the
Nix Programming Language</li>
</ul></div>
</div>

 <div id="outline-container-orga0427af" class="outline-4">
 <h4 id="nix-shell">Nix Shell</h4>
 <div class="outline-text-4" id="text-nix-shell">
 <ul class="org-ul"> <li> <a href="https://ghedam.at/15978/an-introduction-to-nix-shell">An
introduction to nix-shell</a> - Mattia Gheda</li>
 <li> <a href="https://fzakaria.com/2020/08/11/caching-your-nix-shell.html">caching
your nix-shell</a> - Farid Zakaria</li>
</ul></div>
</div>

 <div id="outline-container-org1be0719" class="outline-4">
 <h4 id="nix-flakes">Nix Flakes</h4>
 <div class="outline-text-4" id="text-nix-flakes">
 <ul class="org-ul"> <li> <a href="https://blog.ysndr.de/posts/internals/2021-01-01-flake-ification/">Building
with Nix Flakes for, eh .. reasons!</a> - Yannik Sander</li>
 <li> <a href="https://zimbatm.com/NixFlakes/">Nix Flakes edition</a> - Jonas
Chevalier</li>
</ul></div>
</div>

 <div id="outline-container-org132b4a5" class="outline-4">
 <h4 id="experience">Experience</h4>
 <div class="outline-text-4" id="text-experience">
 <ul class="org-ul"> <li> <a href="https://catgirl.ai/log/nixos-experience/">Eight Months of NixOS</a> -
ash</li>
 <li> <a href="https://tech.channable.com/posts/2021-04-09-nix-is-the-ultimate-devops-toolkit.html">Nix
is the ultimate DevOps toolkit</a> - Ruud van Asseldonk, Reinier Maas,
Falco Peijnenburg, Fabian Thorand, and Robert Kreuzer</li>
</ul></div>
</div>

 <div id="outline-container-org6ba0885" class="outline-4">
 <h4 id="language-specific">Language Specific</h4>
 <div class="outline-text-4" id="text-language-specific">
</div>
 <ul class="org-ul"> <li> <a id="java"></a>Java <br></br> <div class="outline-text-5" id="text-java">
 <ul class="org-ul"> <li> <a href="https://fzakaria.com/2020/07/20/packaging-a-maven-application-with-nix.html">Packaging
a Maven application with Nix</a></li>
</ul></div>
</li>

 <li> <a id="elixir"></a>Elixir <br></br> <div class="outline-text-5" id="text-elixir">
 <ul class="org-ul"> <li> <a href="https://ejpcmac.net/blog/using-nix-in-elixir-projects/">Using Nix in
Elixir projects</a> - Jean-Philippe</li>
</ul></div>
</li>

 <li> <a id="c"></a>C++ <br></br> <div class="outline-text-5" id="text-c">
 <ul class="org-ul"> <li> <a href="https://blog.galowicz.de/2019/04/17/tutorial_nix_cpp_setup/">Setting
up a C++ project environment with nix</a> - Jacek Galowicz</li>
</ul></div>
</li>

 <li> <a id="rust"></a>Rust <br></br> <div class="outline-text-5" id="text-rust">
 <ul class="org-ul"> <li>Managing Rust Dependencies with Nix - James Kay
 <ul class="org-ul"> <li> <a href="https://hadean.com/blog/managing-rust-dependencies-with-nix-part-i/">Part
1</a></li>
 <li> <a href="https://hadean.com/blog/managing-rust-dependencies-with-nix-part-ii/">Part
2</a></li>
</ul></li>
</ul></div>
</li>
</ul></div>

 <div id="outline-container-org0aea384" class="outline-4">
 <h4 id="series">Series</h4>
 <div class="outline-text-4" id="text-series">
 <ul class="org-ul"> <li>Nix by Example - James Fisher
 <ul class="org-ul"> <li> <a href="https://medium.com/@MrJamesFisher/nix-by-example-a0063a1a4c55">Part
1: The Nix expression language</a></li>
</ul></li>
 <li>Ian Henry’s  <i>How to Learn Nix</i> series
 <ul class="org-ul"> <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/introduction/">Part
1: What’s all this about?</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/prior-knowledge/">Part
2: Prior knowledge</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/glossary/">Part 3:
What we talk about when we talk about Nix</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/quick-start-guide/">Part
4: Quick starts, full hearts</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/basic-package-management/">Part
5: Basic package management</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/profiles/">Part 6:
Profiles</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/garbage-collection/">Part
7: Garbage collection</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/channels/">Part 8:
Channels</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/sharing/">Part 9:
Learning to share</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/my-first-derivation/">Part
10: My first derivation</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/okay-my-actual-first-derivation/">Part
11: Okay my actual first derivation</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/nix-language/">Part
12: The Nix expression language</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/derivations/">Part
13: Derivations</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/built-in-functions/">Part
14: Built-in Functions</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/advanced-topics/">Part
15: Advanced Topics</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/command-reference/">Part
16: Command Reference</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/configuration/">Part
17: Configuration</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/nix-manual-reflection/">Part
18: So I read the manual huh</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/switching-from-homebrew-to-nix/">Part
19: Switching from Homebrew to Nix</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/my-first-nix-bug/">Part
20: My first Nix bug</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/my-first-package-upgrade/">Part
21: My first package upgrade</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/declarative-user-environment/">Part
22: Setting up a declarative user environment</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/how-to-learn-nixpkgs/">Part
23: How to learn Nixpkgs</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/overlays/">Part 24:
Overlays</a></li>
 <li> <a href="https://ianthehenry.com/posts/how-to-learn-nix/overriding/">Part
25: Overriding</a></li>
</ul></li>
</ul> <hr></hr> <p>
These links are extracted from humancalico’s git repo ( <a href="https://github.com/humancalico/nix-learning">https://github.com/humancalico/nix-learning</a>).
</p>

 <div class="org-center">
 <p>
With that sorted, I hope learning becomes good ;)
</p>
</div>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./nix-learning.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./nix-learning.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>NixOS : Reproducible - Immutable</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-orgd15ba72" class="outline-2">
 <h2 id="orgd15ba72">The Hop    <span class="tag"> <span class="emacs">emacs</span>  <span class="distro">distro</span>  <span class="linux">linux</span>  <span class="nixos">nixos</span></span></h2>
 <div class="outline-text-2" id="text-orgd15ba72">
 <hr></hr> <p>
Introduction part, you would better have read it on official nixos site ( <a href="https://nixos.org">https://nixos.org</a>)
</p>
</div>

 <div id="outline-container-org61bc5dd" class="outline-3">
 <h3 id="org61bc5dd">“Should you try NixOS?” ❄️</h3>
 <div class="outline-text-3" id="text-org61bc5dd">
 <p>
Here’s an answer from a non-programmer, who just browses and watches media.
Just don’t, if you are looking for small benefit.  <b>Don’t!</b>
 regret having hard time to figure out petty things, again forget about error, you cannot even search in web.
</p>

 <p>
But, if you have decided, go with it. According to me (non-programmer), these points are good to consider NixOS
</p>
 <ul class="org-ul"> <li>You use Emacs (lol),  <b>Emacs</b> ❤️   <b>Nix</b> is Match made in Heaven.</li>
 <li>You want to declare stuffs and get same output, and forget what all you setup, cause its all declared in config.</li>
 <li>You want an isolated environments (shell) to do some stuffs without involving whole system.</li>
 <li>You want to stop troubleshooting and breaking update and are lazy to backup, and want to rollback with ease like with just a reboot.</li>
 <li>You want to say I use  <b>Nixos Btw</b>.</li>
 <li>You don’t want to worry about breaking your system nor fix something when you are updating system.</li>
 <li>You are willing to learn (advanced) things and fine with steep learning curve.</li>
</ul> <hr></hr></div>
</div>

 <div id="outline-container-orgaf5c0fe" class="outline-3">
 <h3 id="orgaf5c0fe">How I manage my system 🌲</h3>
 <div class="outline-text-3" id="text-orgaf5c0fe">
 <p>
I manage my whole system with single org file. Its easy and pretty handy. You can read that file here  <b>↬</b>  <a href="https://github.com/idlip/d-nix/blob/onepiece/d-setup.org">d-setup.org</a> , its both self documenting and has all source code blocks.
</p>

 <p>
Another key feature in my setup is, every file i tangle is at  <b>read-only mode</b>. So generally we can avoid editing/touching them. Thus, every action has to be made in  <b>d-setup.org</b> only.
</p>

 <p>
Also, I have made files to be  <b>symlink</b>, so i can edit them without requiring to rebuild whole thing!
</p>

 <hr></hr></div>


 <div id="outline-container-orgdac3b69" class="outline-4">
 <h4 id="orgdac3b69">Credits 🎖️</h4>
 <div class="outline-text-4" id="text-orgdac3b69">
 <p>
These configs were the inspiration and helped to build this way.
</p>

 <p>
I thank them sincerely.
</p>

 <p>
 <a href="https://github.com/Iron-Shark/Technonomicon">Iron Shark</a>  <b>⟹</b> Made migrating to Single org-file config very easy.
</p>

 <p>
 <a href="https://github.com/sioodmy/dotfiles">Sioodmy</a>  <b>⟹</b> First config which I understand thoroughly and modified based on this.
</p>

 <hr></hr></div>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./nixos-distro.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./nixos-distro.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Vim Proficiency</title>
  <description><![CDATA[<div id="content">
 <div id="outline-container-org7b6c745" class="outline-2">
 <h2 id="org7b6c745">Neo Vim Time    <span class="tag"> <span class="terminal">terminal</span>  <span class="keybindings">keybindings</span>  <span class="cheatsheet">cheatsheet</span>  <span class="vim">vim</span></span></h2>
 <div class="outline-text-2" id="text-org7b6c745">
 <p>
Although I don’t use vim, it has good points for being easy  <b>keyboard glue</b>. Why not learn both of the best worlds of Editors?
</p>

 <p>
Apart from normal vim navigations and operators, These are some of the unique vim magics, which I haven’t used at all.
</p>
</div>

 <div id="outline-container-org1699f52" class="outline-3">
 <h3 id="marks">Marks</h3>
 <div class="outline-text-3" id="text-marks">
 <p>
This is the important one, I have not used this at all. Should try and make use of it. Although emacs  <code>mark-ring</code> is alot better.
</p>

 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>`^</code></td>
 <td class="org-left">Last position of cursor in insert mode</td>
</tr> <tr> <td class="org-left"> <code>`.</code></td>
 <td class="org-left">Last change in current buffer</td>
</tr> <tr> <td class="org-left"> <code>`"</code></td>
 <td class="org-left">Last exited current buffer</td>
</tr> <tr> <td class="org-left"> <code>`0</code></td>
 <td class="org-left">In last file edited</td>
</tr> <tr> <td class="org-left"> <code>''</code></td>
 <td class="org-left">Back to line in current buffer where jumped from</td>
</tr> <tr> <td class="org-left"> <code>``</code></td>
 <td class="org-left">Back to position in current buffer where jumped from</td>
</tr> <tr> <td class="org-left"> <code>`[</code></td>
 <td class="org-left">To beginning of previously changed or yanked text</td>
</tr> <tr> <td class="org-left"> <code>`]</code></td>
 <td class="org-left">To end of previously changed or yanked text</td>
</tr> <tr> <td class="org-left"> <code>`<</code></td>
 <td class="org-left">To beginning of last visual selection</td>
</tr> <tr> <td class="org-left"> <code>`></code></td>
 <td class="org-left">To end of last visual selection</td>
</tr> <tr> <td class="org-left"> <code>ma</code></td>
 <td class="org-left">Mark this cursor position as  <code>a</code></td>
</tr> <tr> <td class="org-left"> <code>`a</code></td>
 <td class="org-left">Jump to the cursor position  <code>a</code></td>
</tr> <tr> <td class="org-left"> <code>'a</code></td>
 <td class="org-left">Jump to the beginning of the line with position  <code>a</code></td>
</tr> <tr> <td class="org-left"> <code>d'a</code></td>
 <td class="org-left">Delete from current line to line of mark  <code>a</code></td>
</tr> <tr> <td class="org-left"> <code>d`a</code></td>
 <td class="org-left">Delete from current position to position of mark  <code>a</code></td>
</tr> <tr> <td class="org-left"> <code>c'a</code></td>
 <td class="org-left">Change text from current line to line of  <code>a</code></td>
</tr> <tr> <td class="org-left"> <code>y`a</code></td>
 <td class="org-left">Yank text from current position to position of  <code>a</code></td>
</tr> <tr> <td class="org-left"> <code>:marks</code></td>
 <td class="org-left">List all current marks</td>
</tr> <tr> <td class="org-left"> <code>:delm a</code></td>
 <td class="org-left">Delete mark  <code>a</code></td>
</tr> <tr> <td class="org-left"> <code>:delm a-d</code></td>
 <td class="org-left">Delete marks  <code>a</code>,  <code>b</code>,  <code>c</code>,  <code>d</code></td>
</tr> <tr> <td class="org-left"> <code>:delm abc</code></td>
 <td class="org-left">Delete marks  <code>a</code>,  <code>b</code>,  <code>c</code></td>
</tr></tbody></table> <hr></hr></div>
</div>

 <div id="outline-container-orgdb0c115" class="outline-3">
 <h3 id="navigation">Navigation</h3>
 <div class="outline-text-3" id="text-navigation">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>%</code></td>
 <td class="org-left">Nearest/matching  <code>{[()]}</code></td>
</tr> <tr> <td class="org-left"> <code>[(</code>  <code>[{</code>  <code>[<</code></td>
 <td class="org-left">Previous  <code>(</code> or  <code>{</code> or  <code><</code></td>
</tr> <tr> <td class="org-left"> <code>])</code></td>
 <td class="org-left">Next</td>
</tr> <tr> <td class="org-left"> <code>[m</code></td>
 <td class="org-left">Previous method start</td>
</tr> <tr> <td class="org-left"> <code>[M</code></td>
 <td class="org-left">Previous method end</td>
</tr></tbody></table> <hr></hr></div>
</div>

 <div id="outline-container-orge0b202b" class="outline-3">
 <h3 id="jumping">Jumping</h3>
 <div class="outline-text-3" id="text-jumping">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code><C-O></code></td>
 <td class="org-left">Go back to previous location</td>
</tr> <tr> <td class="org-left"> <code><C-I></code></td>
 <td class="org-left">Go forward</td>
</tr> <tr> <td class="org-left"> <code>gf</code></td>
 <td class="org-left">Go to file in cursor</td>
</tr></tbody></table> <hr></hr></div>
</div>

 <div id="outline-container-org5995d38" class="outline-3">
 <h3 id="counters">Counters</h3>
 <div class="outline-text-3" id="text-counters">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code><C-A></code></td>
 <td class="org-left">Increment number</td>
</tr> <tr> <td class="org-left"> <code><C-X></code></td>
 <td class="org-left">Decrement</td>
</tr></tbody></table> <hr></hr></div>
</div>

 <div id="outline-container-orgc089acc" class="outline-3">
 <h3 id="tags">Tags</h3>
 <div class="outline-text-3" id="text-tags">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>:tag Classname</code></td>
 <td class="org-left">Jump to first definition of Classname</td>
</tr> <tr> <td class="org-left"> <code><C-]></code></td>
 <td class="org-left">Jump to definition</td>
</tr> <tr> <td class="org-left"> <code>g]</code></td>
 <td class="org-left">See all definitions</td>
</tr> <tr> <td class="org-left"> <code><C-T></code></td>
 <td class="org-left">Go back to last tag</td>
</tr> <tr> <td class="org-left"> <code><C-O> <C-I></code></td>
 <td class="org-left">Back/forward</td>
</tr> <tr> <td class="org-left"> <code>:tselect Classname</code></td>
 <td class="org-left">Find definitions of Classname</td>
</tr> <tr> <td class="org-left"> <code>:tjump Classname</code></td>
 <td class="org-left">Find definitions of Classname (auto-select 1st)</td>
</tr></tbody></table> <hr></hr></div>
</div>

 <div id="outline-container-org3919875" class="outline-3">
 <h3 id="folds">Folds</h3>
 <div class="outline-text-3" id="text-folds">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>zo</code>  <i>/</i>  <code>zO</code></td>
 <td class="org-left">Open</td>
</tr> <tr> <td class="org-left"> <code>zc</code>  <i>/</i>  <code>zC</code></td>
 <td class="org-left">Close</td>
</tr> <tr> <td class="org-left"> <code>za</code>  <i>/</i>  <code>zA</code></td>
 <td class="org-left">Toggle</td>
</tr> <tr> <td class="org-left"> <code>zv</code></td>
 <td class="org-left">Open folds for this line</td>
</tr> <tr> <td class="org-left"> <code>zM</code></td>
 <td class="org-left">Close all</td>
</tr> <tr> <td class="org-left"> <code>zR</code></td>
 <td class="org-left">Open all</td>
</tr> <tr> <td class="org-left"> <code>zm</code></td>
 <td class="org-left">Fold more  <i>(foldlevel += 1)</i></td>
</tr> <tr> <td class="org-left"> <code>zr</code></td>
 <td class="org-left">Fold less  <i>(foldlevel -= 1)</i></td>
</tr> <tr> <td class="org-left"> <code>zx</code></td>
 <td class="org-left">Update folds</td>
</tr></tbody></table> <hr></hr></div>
</div>

 <div id="outline-container-orge3a7517" class="outline-3">
 <h3 id="command-line">Command line</h3>
 <div class="outline-text-3" id="text-command-line">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code><C-R><C-W></code></td>
 <td class="org-left">Insert current word into the command line</td>
</tr> <tr> <td class="org-left"> <code><C-R>"</code></td>
 <td class="org-left">Paste from ” register</td>
</tr> <tr> <td class="org-left"> <code><C-X><C-F></code></td>
 <td class="org-left">Auto-completion of path in insert mode</td>
</tr></tbody></table> <hr></hr></div>
</div>

 <div id="outline-container-org1664829" class="outline-3">
 <h3 id="spell-checking">Spell checking</h3>
 <div class="outline-text-3" id="text-spell-checking">
 <table> <colgroup> <col class="org-left"></col> <col class="org-left"></col></colgroup> <thead> <tr> <th scope="col" class="org-left">Shortcut</th>
 <th scope="col" class="org-left">Description</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <code>:set spell spelllang=en_us</code></td>
 <td class="org-left">Turn on US English spell checking</td>
</tr> <tr> <td class="org-left"> <code>]s</code></td>
 <td class="org-left">Move to next misspelled word after the cursor</td>
</tr> <tr> <td class="org-left"> <code>[s</code></td>
 <td class="org-left">Move to previous misspelled word before the cursor</td>
</tr> <tr> <td class="org-left"> <code>z=</code></td>
 <td class="org-left">Suggest spellings for the word under/after the cursor</td>
</tr> <tr> <td class="org-left"> <code>zg</code></td>
 <td class="org-left">Add word to spell list</td>
</tr> <tr> <td class="org-left"> <code>zw</code></td>
 <td class="org-left">Mark word as bad/mispelling</td>
</tr> <tr> <td class="org-left"> <code>zu</code> /  <code>C-X (Insert Mode)</code></td>
 <td class="org-left">Suggest words for bad word under cursor from spellfile</td>
</tr></tbody></table> <p>
See  <code>:help spell</code>
</p>

 <hr></hr> <p>
Source of this cheatsheet :  <a href="https://devhints.io/vim">https://devhints.io/vim</a>
</p>

 <p>
With that noted, I hope you turn out to be a proficient  <i> <b>Vimmer</b></i> or an efficient  <i> <b>Emacser</b></i>
</p>

 <p>
For emacs, I have my previous post for it.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>https://idlip.github.io/posts/./vim-proficiency.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./vim-proficiency.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
<item>
  <title>Window Managers</title>
  <description><![CDATA[<div id="content">
 <p>
Desktop Environment gives us everything we would like to operate on Desktop with care towards UI and UX, that matches the common paradigm. It is a lot driven by mouse, and seems to fairly make work simpler and easier. It is not like keyboard can always make task quicker, mouse can be ahead of the race.
</p>

 <p>
But I too followed the trend to ditch mouse and embrace the swiftness of keyboard. I like to hear the “clicks” and “tacks”.
</p>

 <p>
Window Managers are tools which only manage the window alignment and their behavior, with wayland, the compositor acts as both display server and window manager. Typically tho window managers offer keyboard focused, tweakable configuration to suit user’s need, but alas it does work for minimal sake, just does offer on managing windows and thats it. It is not a Desktop environment to facilitate for other needs.
</p>

 <p>
After fairly using a lot of window manager, from X11 days to now Wayland years, I stick with window managers only. It gives the feel of unique, self owned customization. My system can only be used by me, how cool !
</p>

 <p>
Back in X11 days, I started with Cinnamon (Linux Mint) and later moved to XFCE to conserve Ram usage. Both were very good, Xfce was very much customization. Later I fell in the rabbit hole for more minimalism, and started looking at Youtube videos and came along the road of Window Managers.
</p>

 <p>
Tried with  <code>i3wm</code>, and boyo boy, it worked and made the workflow like charm, and again I feel into another rabbit hole of World of window managers. The cost I had to pay was, endless customization for my needs, and wasting time. After fair usage, with some free time (pandemic age) I tried out other WMs, like  <code>dwm</code>,  <code>leftwm</code>,  <code>Qtile</code> &  <code>bspwm</code> and used them all fairly equally and it was done.
</p>

 <p>
With wayland years, I soon discovered  <code>sway</code> was popular and drop-in replacement, so was suite of apps needed to replacement for pure wayland integration. Soon listed some and move to  <code>sway</code> ship, and reddit showed beautiful blur and animations of  <code>hyprland</code>, and finally I settled on with  <code>Hyprland</code>.
</p>

 <p>
So far I have only listen WMs names, and I have not spoken of personal usage and feeling towards each of them, cause, they all just do one thing and they do it well. So except for config file (syntax), there is not much difference for user who wants to use laptop and “ <b>do the work</b>”. It is a wonderful change to stick with WM, cause easy management of windows and minimal way of using the system, so I can use the saving part for demanding tasks.
</p>

 <p>
One peculiar, and best thing WMs offer are Workspace. Which acts like spaces where windows are placed or configured, we get 10 (typically enough) or even more to organize and use our application in a handy way.
</p>

 <p>
Closing words, Window Managers are definitely great, and changing enhancement, users (linux) should give it a try at least once, of course it’s not for everyone, but how can anyone tell unless if they have not even tried. It can enhance the workflow for many, and can be worse for others.
</p>

 <p>
So, just have a share of trial, explore and relax!
</p>
</div>]]></description>
  <link>https://idlip.github.io/posts/./window-managers.html</link>
  <guid isPermaLink="false">https://idlip.github.io/posts/./window-managers.html</guid>
  <pubDate>Sun, 04 Feb 2024 12:54:00 +0000</pubDate>
</item>
</channel>
</rss>
